CONTRACT_TYPE
{
	sortKey = c
	name = ConstellationsKsoRelayStationKeep
	group = RelayConstellations

	title = Kerbostationary relays station-keeping
	description = It's been more than a year since we last verified position of the KSO relays. It is normal for a satellite to drift from its target position over time, we ask you to bring the relays back within margins. If a vessel is already in a correct position, you don't have to do anything other that focusing it.

	maxSimultaneous = 1

	synopsis = Fix KSO relays orbits if necessary

	completedMessage = The relays are in position and working!

	prestige = Trivial

	maxExpiry = 21

	targetBody = HomeWorld()

	rewardScience = 0
	rewardReputation = @Constellations:stationKeepReputation
	rewardFunds = 3 * @Constellations:stationKeepFunds
	advanceFunds = 0
	failureReputation = @rewardReputation
	failureFunds = @advanceFunds

	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract

		title = Must have established KSO relays through contract, but no earlier than @Constellations:stationKeepCD ago.

		contractType = ConstellationsKsoRelayFollowUp
		cooldownDuration = @Constellations:stationKeepCD
	}

	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract

		title = At least @Constellations:stationKeepCD has passed since the last time the contract was completed.

		contractType = ConstellationsKsoRelayStationKeep
		cooldownDuration = @Constellations:stationKeepCD
		minCount = 0
	}

	DATA
	{
		type = List<string>
		vessels = ["KSO Relay A", "KSO Relay B", "KSO Relay C"]
		markers = ["KSO Relay Marker A", "KSO Relay Marker B", "KSO Relay Marker C"]
	}

	REQUIREMENT
	{
		name = ValidVessel
		type = ValidVessel

		vessel = @/vessels.ElementAt(0)
	}

	REQUIREMENT
	{
		name = ValidVessel
		type = ValidVessel

		vessel = @/vessels.ElementAt(1)
	}

	REQUIREMENT
	{
		name = ValidVessel
		type = ValidVessel

		vessel = @/vessels.ElementAt(2)
	}

	BEHAVIOUR
	{
		name = SpawnVessel
		type = SpawnVessel

		VESSEL
		{
			name = @/markers.ElementAt(0)
			craftPart = constellations-dummy
			owned = False
			targetBody = HomeWorld()
			vesselType = DroppedPart

			ORBIT = @RelayConstellations:ksoOrbits.ElementAt(0)
		}

		VESSEL
		{
			name = @/markers.ElementAt(1)
			craftPart = constellations-dummy
			owned = False
			targetBody = HomeWorld()
			vesselType = DroppedPart

			ORBIT = @RelayConstellations:ksoOrbits.ElementAt(1)
		}

		VESSEL
		{
			name = @/markers.ElementAt(2)
			craftPart = constellations-dummy
			owned = False
			targetBody = HomeWorld()
			vesselType = DroppedPart

			ORBIT = @RelayConstellations:ksoOrbits.ElementAt(2)
		}
	}

	DATA
	{
		type = int
		intAlt = 2863334
	}

	DATA
	{
		type = double

		magnitude = Round(Log(@/intAlt, 10), 1)
		g1 = Pow(10, Max(@magnitude-4, 2))
		g2 = Max(Pow(10, @magnitude-7), 0.5)

		oPrecision0 = Max(Round(@/intAlt / 500, @g1), 20 * @g1)
		dPrecision0 = Max(Round(@/intAlt / 2500, 200000 * @g2), 200000 * @g2)
	}

	PARAMETER
	{
		ITERATOR
		{
			type = int
			idx = [0, 1, 2]
		}
		name = "Relay"+@idx
		type = VesselParameterGroup

		vessel = @/vessels.ElementAt(@idx)

		completedMessage = Position of @/vessels.ElementAt(@idx) verified successfully
		rewardFunds = @Constellations:stationKeepFunds

		PARAMETER
		{
			name = VesselIsType
			type = VesselIsType
			vesselType = Relay
		}

		PARAMETER
		{
			name = Orbit
			type = Orbit

			minPeriod = 5h 59m 4s
			maxPeriod = 5h 59m 14s

			minPeA = Max(0, @/intAlt - @/oPrecision0)
			maxApA = @/intAlt + @/oPrecision0

			maxInclination = 0.1
		}

		PARAMETER
		{
			name = Rendezvous
			type = Rendezvous
			hideChildren = !@Constellations:DEBUG

			title = "The relay should be within "+@/dPrecision0.ToString("0")+"m of the "+@/markers.ElementAt(@../idx)

			vessel = @/markers.ElementAt(@../idx)
			distance = @/dPrecision0

			disableOnStateChange = true
		}

		duration = 2s
	}

	BEHAVIOUR
	{
		name = DestroyVessel
		type = DestroyVessel
		onState = CONTRACT_COMPLETED
		vessel = @/markers.ElementAt(0)
		vessel = @/markers.ElementAt(1)
		vessel = @/markers.ElementAt(2)
	}
}
