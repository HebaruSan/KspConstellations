CONTRACT_TYPE
{
	sortKey = e

	name = ConstellationsMoonRelayLagrangeStationKeep
	group = RelayConstellations

	genericTitle = Moon's Lagrange point relays station-keeping
	title = "@/targetBody"+"'s Lagrange point relays station-keeping"
	description = It's been some time since we last verified position of the @targetBody Lagrange relays. It is normal for a satellite to drift from its target position over time, we ask you to bring the relays back within margins. If a vessel is already in a correct position, you don't have to do anything other that focusing it.

	maxSimultaneous = 1

	synopsis = Fix @targetBody's Lagrange relays orbits if necessary
	genericDescription = Fix bodys Lagrange relays orbits if necessary

	completedMessage = The relays are in position and working!

	prestige = Trivial

	maxExpiry = 21

	targetBody = @/tidalMoon

	rewardScience = 0
	rewardReputation = @Constellations:stationKeepReputation
	rewardFunds = 3 * @Constellations:stationKeepFunds
	advanceFunds = 0
	failureReputation = @rewardReputation
	failureFunds = @advanceFunds

	DATA
	{
		type = Boolean
		coMoon = HomeWorld().Parent().IsPlanet()
		hidden = true
	}

	DATA
	{
		type = CelestialBody
		tidalMoon = (@/coMoon ? HomeWorld().Parent().Children() : HomeWorld().Children()).Where(b => (b.Orbit().Period() == b.RotationalPeriod())).SelectUnique()
		uniquenessCheck = CONTRACT_ACTIVE

		title = "Target body must be "+HomeWorld()+"'s tidally locked moon or co-moon"
	}

	DATA
	{
		type = string
		hidden = true
		l4Marker = @/targetBody+" L4 Relay Marker"
		l5Marker = @/targetBody+" L5 Relay Marker"
		l4Relay = @/targetBody+" L4 Relay"
		l5Relay = @/targetBody+" L5 Relay"
	}

	DATA
	{
		type = List<string>
		points = ["L4", "L5"]
		markers = [ @/l4Marker, @/l5Marker ]
	}

	DATA
	{
		type = List<VesselIdentifier>
		relays = [ @/l4Relay, @/l5Relay ]
	}

	REQUIREMENT
	{
		name = Established
		type = ValidVessel

		vessel = @/relays.ElementAt(0)
	}

	REQUIREMENT
	{
		name = Established
		type = ValidVessel

		vessel = @/relays.ElementAt(1)
	}

	REQUIREMENT
	{
		name = OldRelays
		type = Expression

		expression = (Vessel(@/relays.ElementAt(0)).MET() > @Constellations:stationKeepCD) && (Vessel(@/relays.ElementAt(1)).MET() > @Constellations:stationKeepCD)
		title = At least @Constellations:stationKeepCD has passed since the relays have been established
	}

	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract

		title = At least @Constellations:stationKeepCD has passed since the last time the contract was completed.

		contractType = ConstellationsMoonRelayLagrangeStationKeep
		cooldownDuration = @Constellations:stationKeepCD
		minCount = 0
	}

	DATA
	{
		type = double
		requiredAntennaPower = Pow(@/targetBody.Orbit().Apoapsis() + @/targetBody.SphereOfInfluence() + (@/coMoon ? HomeWorld().Orbit().Apoapsis() : 0), 2) / 2000000000 // assume 2G at home
	}

	BEHAVIOUR
	{
		name = SpawnVessel
		type = SpawnVessel

		VESSEL
		{
			name = @/markers.ElementAt(0)
			craftPart = constellations-dummy
			owned = False
			targetBody = @/targetBody.Parent()
			vesselType = DroppedPart

			ORBIT
			{
				SMA = @/targetBody.Orbit().SemiMajorAxis()
				ECC = @/targetBody.Orbit().Eccentricity() + 1.0E-11
				INC = @/targetBody.Orbit().Inclination() + 1.0E-11
				LPE = @/targetBody.Orbit().ArgumentOfPeriapsis()
				LAN = @/targetBody.Orbit().LAN() + 1.0E-11
				MNA = @/targetBody.Orbit().MeanAnomalyAtEpoch() - 5.23598775598
				EPH = @/targetBody.Orbit().Epoch() + 1.0E-11
				REF = 0 // ignored
			}
		}

		VESSEL
		{
			name = @/markers.ElementAt(1)
			craftPart = constellations-dummy
			owned = False
			targetBody = @/targetBody.Parent()
			vesselType = DroppedPart

			ORBIT
			{
				SMA = @/targetBody.Orbit().SemiMajorAxis()
				ECC = @/targetBody.Orbit().Eccentricity() + 1.0E-11
				INC = @/targetBody.Orbit().Inclination() + 1.0E-11
				LPE = @/targetBody.Orbit().ArgumentOfPeriapsis()
				LAN = @/targetBody.Orbit().LAN() + 1.0E-11
				MNA = @/targetBody.Orbit().MeanAnomalyAtEpoch() + 5.23598775598
				EPH = @/targetBody.Orbit().Epoch() + 1.0E-11
				REF = 0 // ignored
			}
		}
	}

	DATA
	{
		type = long
		intAlt = @/targetBody.Orbit().SemiMajorAxis() - @targetBody.Parent().Radius()
	}

	DATA
	{
		type = double

		magnitude = Round(Log(@/intAlt, 10), 1)
		g1 = Pow(10, Max(@magnitude-4, 2))
		g2 = Max(Pow(10, @magnitude-7), 0.5)

		oPrecision0 = Max(Round(@/intAlt / 500, @g1), 20 * @g1)
		dPrecision0 = Max(Round(@/intAlt / 2500, 200000 * @g2), 200000 * @g2)
	}

	PARAMETER
	{
		ITERATOR
		{
			type = int
			idx = [0, 1]
		}
		name = "Relay"+@idx
		type = VesselParameterGroup

		vessel = @/relays.ElementAt(@idx)

		completedMessage = Position of the @/relays.ElementAt(@idx) verified successfully
		rewardFunds = @Constellations:stationKeepFunds

		PARAMETER
		{
			name = VesselIsType
			type = VesselIsType
			vesselType = Relay
		}

		PARAMETER
		{
			name = Orbit
			type = Orbit

			targetBody = @/targetBody.Parent()

			minPeA = Max(0, @/targetBody.Orbit().Periapsis() - @/oPrecision0)
			maxApA = @/targetBody.Orbit().Apoapsis() + @/oPrecision0

			minInclination = Max(0, @/targetBody.Orbit().Inclination() - 0.1)
			maxInclination = Min(180, @/targetBody.Orbit().Inclination() + 0.1)
		}

		PARAMETER
		{
			name = Rendezvous
			type = Rendezvous

			title = "The relay should be within "+@/dPrecision0.ToString("0")+"m of the marker"
			hideChildren = !@Constellations:DEBUG

			disableOnStateChange = true

			vessel = @/markers.ElementAt(@../idx)
			distance = @/dPrecision0
		}

		duration = 2s
	}

	BEHAVIOUR
	{
		name = DestroyVessel
		type = DestroyVessel
		onState = CONTRACT_COMPLETED
		vessel = @/markers.ElementAt(0)
		vessel = @/markers.ElementAt(1)
	}
}
