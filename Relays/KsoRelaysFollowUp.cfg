CONTRACT_TYPE
{
	sortKey = b
	name = ConstellationsKsoRelayFollowUp
	group = RelayConstellations

	title = Place two more relays in kerbostationary orbit
	description = The relay above the KSC is great but it can't reach the other side of Kerbin. We need two more satellites to form an equilateral triangle, this should give us a 360 degrees coverage.

	maxCompletions = 1
	maxSimultaneous = 1

	synopsis = Form an equilateral triangle of relays in kerbostationary orbit

	completedMessage = The relays are in position and working!

	prestige = Significant

	targetBody = HomeWorld()

	rewardScience = 0
	rewardReputation = 1.5 * @RelayConstellations:ksoBaseReputation
	rewardFunds = 1.5 * @RelayConstellations:ksoBaseFunds
	advanceFunds = @rewardFunds / 3
	failureReputation = @rewardReputation
	failureFunds = @advanceFunds

	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract

		title = Must have established relay above the KSC through contract, but no earlier than 30 days ago.

		contractType = ConstellationsKsoRelay
		cooldownDuration = 30d
	}

	DATA
	{
		type = List<string>
		names = ["The first relay", "The second relay"]
		vessels = ["KSO Relay B", "KSO Relay C"]
		markers = ["KSO Relay Marker B", "KSO Relay Marker C"]
	}

	BEHAVIOUR
	{
		name = SpawnVessel
		type = SpawnVessel

		VESSEL
		{
			name = @/markers.ElementAt(0)
			craftPart = constellations-dummy
			owned = False
			targetBody = HomeWorld()
			vesselType = DroppedPart

			ORBIT = @RelayConstellations:ksoOrbits.ElementAt(1)
		}

		VESSEL
		{
			name = @/markers.ElementAt(1)
			craftPart = constellations-dummy
			owned = False
			targetBody = HomeWorld()
			vesselType = DroppedPart

			ORBIT = @RelayConstellations:ksoOrbits.ElementAt(2)
		}
	}

	PARAMETER
	{
		ITERATOR
		{
			type = int
			idx = [0, 1]
		}
		name = "Relay"+@idx
		type = All
		title = @/names.ElementAt(@idx)

		PARAMETER
		{
			name = Baseline
			type = VesselParameterGroup

			define = @/vessels.ElementAt(@../idx)
			dissassociateVesselsOnContractCompletion = true

			rewardFunds = @RelayConstellations:ksoBaseFunds / 3

			PARAMETER
			{
				name = NewVessel
				type = NewVessel
			}

			PARAMETER
			{
				name = HasCrew
				type = HasCrew
				minCrew = 0
				maxCrew = 0
			}

			PARAMETER
			{
				name = HasAntenna
				type = HasAntenna
				minAntennaPower = 200000000000 // 200G
				antennaType = RELAY
			}

			PARAMETER
			{
				name = PowerGenerator
				type = Any
				title = Have solar panels onboard
				hideChildren = !@Constellations:DEBUG

				PARAMETER
				{
					name = StockSolarGenerator
					type = PartValidation
					partModule = ModuleDeployableSolarPanel
					hideChildren = !@Constellations:DEBUG
					minCount = 1
				}
			
				PARAMETER:NEEDS[NearFutureSolar]
				{
					name = NFSolarGenerator
					type = PartValidation
					partModule = ModuleCurvedSolarPanel
					hideChildren = !@Constellations:DEBUG
					minCount = 1
				}
			
				PARAMETER:NEEDS[Kopernicus]
				{
					name = KopernicusSolarGenerator
					type = PartValidation
					partModule = KopernicusSolarPanel
					hideChildren = !@Constellations:DEBUG
					minCount = 1
				}
			}

			PARAMETER
			{
				name = VesselIsType
				type = VesselIsType
				vesselType = Relay
			}

			PARAMETER
			{
				name = Orbit
				type = Orbit

				minPeriod = 5h 59m 4s
				maxPeriod = 5h 59m 14s

				minPeA = 2860834
				maxApA = 2865834

				maxInclination = 0.1
			}

			PARAMETER
			{
				name = Rendezvous
				type = Rendezvous
				hideChildren = !@Constellations:DEBUG

				title = Place the relay within 10km of the @/markers.ElementAt(@../../idx)

				vessel = @/markers.ElementAt(@../../idx)
				distance = 10000

				disableOnStateChange = true
			}

			duration = 2d
		}

		PARAMETER
		{
			name = Precision1
			type = VesselParameterGroup

			vessel = @/vessels.ElementAt(@../idx)

			title = Circularize relay's orbit at 2863334m with less than 100m deviation (Optional)

			optional = True
			rewardReputation = @RelayConstellations:ksoPrecisionReputation
			rewardFunds = @RelayConstellations:ksoPrecisionFunds

			PARAMETER
			{
				name = Precision1Orbit
				type = Orbit
				hidden = !@Constellations:DEBUG
				hideChildren = !@Constellations:DEBUG

				minPeA = 2863234
				maxApA = 2863434
			}

			duration = 5s
		}

		PARAMETER
		{
			name = Precision2
			type = VesselParameterGroup

			vessel = @/vessels.ElementAt(@../idx)

			title = Circularize the relay's orbit at 2863334m with less than 1m deviation (Optional)

			optional = True
			rewardReputation = 2 * @RelayConstellations:ksoPrecisionReputation
			rewardFunds = 2 * @RelayConstellations:ksoPrecisionFunds

			PARAMETER
			{
				name = Precision2Orbit
				type = Orbit
				hidden = !@Constellations:DEBUG
				hideChildren = !@Constellations:DEBUG

				minPeA = 2863333.5
				maxApA = 2863334.5
			}

			duration = 5s
		}

		PARAMETER
		{
			name = Precision3
			type = VesselParameterGroup

			vessel = @/vessels.ElementAt(@../idx)

			title = Place the relay within 100m of the @/markers.ElementAt(@../idx) (Optional)

			optional = True
			rewardReputation = @RelayConstellations:ksoPrecisionReputation
			rewardFunds = @RelayConstellations:ksoPrecisionFunds

			PARAMETER
			{
				name = Precision3Rendezvous
				type = Rendezvous
				hidden = !@Constellations:DEBUG
				hideChildren = !@Constellations:DEBUG

				vessel = @/markers.ElementAt(@../../idx)
				distance = 100
			}
		}
	}

	BEHAVIOUR
	{
		name = DestroyVesselB
		type = DestroyVessel
		onState = PARAMETER_COMPLETED
		parameter = Relay0
		vessel = @/markers.ElementAt(0)
	}

	BEHAVIOUR
	{
		name = DestroyVesselC
		type = DestroyVessel
		onState = PARAMETER_COMPLETED
		parameter = Relay1
		vessel = @/markers.ElementAt(1)
	}
}
