CONTRACT_TYPE
{
	sortKey = b
	name = ConstellationsKsoRelayFollowUp
	group = RelayConstellations

	title = Place two more relays in kerbostationary orbit
	description = The relay above the KSC is great but it can't reach the other side of Kerbin. We need two more satellites to form an equilateral triangle, this should give us a 360 degrees coverage.

	maxCompletions = 1
	maxSimultaneous = 1

	synopsis = Form an equilateral triangle of relays in kerbostationary orbit

	completedMessage = The relays are in position and working!

	prestige = Trivial

	targetBody = HomeWorld()

	rewardScience = 0
	rewardReputation = 1.5 * @RelayConstellations:ksoBaseReputation
	rewardFunds = 1.5 * @RelayConstellations:ksoBaseFunds
	advanceFunds = @rewardFunds / 3
	failureReputation = @rewardReputation
	failureFunds = @advanceFunds

	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract

		title = Must have established relay above the KSC through contract, but no earlier than @Constellations:constellationCD ago.

		contractType = ConstellationsKsoRelay
		cooldownDuration = @Constellations:constellationCD
	}

	DATA
	{
		type = List<string>
		names = ["The first relay", "The second relay"]
		vessels = ["KSO Relay B", "KSO Relay C"]
		markers = ["KSO Relay Marker B", "KSO Relay Marker C"]
	}

	BEHAVIOUR
	{
		name = SpawnVessel
		type = SpawnVessel

		VESSEL
		{
			name = @/markers.ElementAt(0)
			craftPart = constellations-dummy
			owned = False
			targetBody = HomeWorld()
			vesselType = DroppedPart

			ORBIT = @RelayConstellations:ksoOrbits.ElementAt(1)
		}

		VESSEL
		{
			name = @/markers.ElementAt(1)
			craftPart = constellations-dummy
			owned = False
			targetBody = HomeWorld()
			vesselType = DroppedPart

			ORBIT = @RelayConstellations:ksoOrbits.ElementAt(2)
		}
	}

	DATA
	{
		type = int
		intAlt = 2863334
	}

	DATA
	{
		type = double

		magnitude = Round(Log(@/intAlt, 10), 1)
		g1 = Pow(10, Max(@magnitude-4, 2))
		g2 = Max(Pow(10, @magnitude-7), 0.5)

		oPrecision0 = Max(Round(@/intAlt / 500, @g1), 20 * @g1)
		oPrecision1 = Max(Round(@/intAlt / 10000, @g1), @g1)
		oPrecision2 = Max(Round(@/intAlt / 10000000, @g2), @g2)
		dPrecision0 = Max(Round(@/intAlt / 250000, 2000 * @g2), 2000 * @g2)
		dPrecision1 = Max(Round(@/intAlt / 10000000, 200 * @g2), 200 * @g2)
	}

	PARAMETER
	{
		ITERATOR
		{
			type = int
			idx = [0, 1]
		}
		name = "Relay"+@idx
		type = All
		title = @/names.ElementAt(@idx)

		PARAMETER
		{
			name = Baseline
			type = VesselParameterGroup

			define = @/vessels.ElementAt(@../idx)

			rewardFunds = @RelayConstellations:ksoBaseFunds / 3

			PARAMETER
			{
				name = NewVessel
				type = NewVessel
			}

			PARAMETER
			{
				name = VesselIsType
				type = VesselIsType
				vesselType = Relay
			}

			PARAMETER
			{
				name = HasCrew
				type = HasCrew
				minCrew = 0
				maxCrew = 0
			}

			PARAMETER
			{
				name = HasAntenna
				type = HasAntenna
				minAntennaPower = 200000000000 // 200G
				antennaType = RELAY
			}

			PARAMETER
			{
				name = PowerGenerator
				type = Any
				title = Have solar panels onboard
				hideChildren = !@Constellations:DEBUG

				PARAMETER
				{
					name = StockSolarGenerator
					type = PartValidation
					partModule = ModuleDeployableSolarPanel
					hideChildren = !@Constellations:DEBUG
					minCount = 1
				}
			
				PARAMETER:NEEDS[NearFutureSolar]
				{
					name = NFSolarGenerator
					type = PartValidation
					partModule = ModuleCurvedSolarPanel
					hideChildren = !@Constellations:DEBUG
					minCount = 1
				}
			
				PARAMETER:NEEDS[Kopernicus]
				{
					name = KopernicusSolarGenerator
					type = PartValidation
					partModule = KopernicusSolarPanel
					hideChildren = !@Constellations:DEBUG
					minCount = 1
				}
			}

			PARAMETER
			{
				name = Orbit
				type = Orbit

				minPeriod = 5h 59m 4s
				maxPeriod = 5h 59m 14s

				minPeA = Max(0, @/intAlt - @/oPrecision0)
				maxApA = @/intAlt + @/oPrecision0

				maxInclination = 0.1
			}

			PARAMETER
			{
				name = Rendezvous
				type = Rendezvous

				title = "Place the relay within "+@/dPrecision0.ToString("0")+"m of the "+@/markers.ElementAt(@../../idx)
				hideChildren = !@Constellations:DEBUG

				disableOnStateChange = true

				vessel = @/markers.ElementAt(@../../idx)
				distance = @/dPrecision0
			}

			duration = 2d
		}

		PARAMETER
		{
			name = Precision1
			type = VesselParameterGroup

			vessel = @/vessels.ElementAt(@../idx)

			title = "Circularize at "+@/intAlt+"m with less than "+@/oPrecision1.ToString("0")+"m deviation (Optional)"

			optional = True
			rewardReputation = @Constellations:precisionReputation
			rewardFunds = @Constellations:precisionFunds

			PARAMETER
			{
				name = Precision1Orbit
				type = Orbit
				hidden = !@Constellations:DEBUG
				hideChildren = !@Constellations:DEBUG

				minPeA = Max(0, @/intAlt - @/oPrecision1)
				maxApA = @/intAlt + @/oPrecision1
			}

			duration = 2s
		}

		PARAMETER
		{
			name = Precision2
			type = VesselParameterGroup

			vessel = @/vessels.ElementAt(@../idx)

			title = "Circularize at "+@/intAlt+"m with less than "+@/oPrecision2.ToString("0")+"m deviation (Optional)"

			optional = True
			rewardReputation = 2 * @Constellations:precisionReputation
			rewardFunds = 2 * @Constellations:precisionFunds

			PARAMETER
			{
				name = Precision2Orbit
				type = Orbit
				hidden = !@Constellations:DEBUG
				hideChildren = !@Constellations:DEBUG

				minPeA = Max(0, @/intAlt - @/oPrecision2)
				maxApA = @/intAlt + @/oPrecision2
			}

			duration = 2s
		}

		PARAMETER
		{
			name = Precision3
			type = VesselParameterGroup

			vessel = @/vessels.ElementAt(@../idx)

			title = "Place the relay within "+@/dPrecision1.ToString("0")+"m of the "+@/markers.ElementAt(@../idx)+" (Optional)"

			optional = True
			rewardReputation = @Constellations:precisionReputation
			rewardFunds = @Constellations:precisionFunds

			PARAMETER
			{
				name = Precision3Rendezvous
				type = Rendezvous
				hidden = !@Constellations:DEBUG
				hideChildren = !@Constellations:DEBUG

				vessel = @/markers.ElementAt(@../../idx)
				distance = @/dPrecision1
			}
		}
	}

	BEHAVIOUR
	{
		name = DestroyVesselB
		type = DestroyVessel
		onState = PARAMETER_COMPLETED
		parameter = Relay0
		vessel = @/markers.ElementAt(0)
	}

	BEHAVIOUR
	{
		name = DestroyVesselC
		type = DestroyVessel
		onState = PARAMETER_COMPLETED
		parameter = Relay1
		vessel = @/markers.ElementAt(1)
	}
}
