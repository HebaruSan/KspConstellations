CONTRACT_TYPE
{
	sortKey = j

	name = KsoRelayFollowUp
	group = RelayConstellations

	title = Place two more relays in kerbostationary orbit
	description = The relay above the KSC is great but it can't reach the other side of Kerbin. We need two more satellites to form an equilateral triangle, this should give us a 360 degrees coverage.

	maxCompletions = 1
	maxSimultaneous = 1

	synopsis = Form an equilateral triangle of relays in kerbostationary orbit

	completedMessage = The relays are in position and working!

	prestige = Trivial

	maxExpiry = 21

	targetBody = HomeWorld()

	notes = Required deltaV from Low @/targetBody Orbit: @/deltaV.Print() m/s \nDon't forget to leave some fuel for station-keeping!

	rewardScience = 0
	rewardReputation = 1.5 * @RelayConstellations:ksoBaseReputation
	rewardFunds = 1.5 * @RelayConstellations:ksoBaseFunds
	advanceFunds = @rewardFunds / 3
	failureReputation = @rewardReputation
	failureFunds = @advanceFunds

	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract

		title = Must have established relay above the KSC through contract, but no earlier than @Constellations:constellationCD ago.

		contractType = KsoRelay
		cooldownDuration = @Constellations:constellationCD
	}

	DATA
	{
		type = List<string>
		names = ["The first relay", "The second relay"]
		vessels = ["KSO Relay B", "KSO Relay C"]
		markers = ["KSO Relay Marker B", "KSO Relay Marker C"]
	}

	BEHAVIOUR
	{
		name = SpawnVessel
		type = SpawnVessel

		VESSEL
		{
			name = @/markers.ElementAt(0)
			craftPart = constellations-dummy
			owned = False
			targetBody = HomeWorld()
			vesselType = DroppedPart

			ORBIT = CreateOrbit([3463334.0398701429, 1.0E-11, 0, 237.38459898406168, 0, 3.62668220424, 18545.434569902998], 1)
		}

		VESSEL
		{
			name = @/markers.ElementAt(1)
			craftPart = constellations-dummy
			owned = False
			targetBody = HomeWorld()
			vesselType = DroppedPart

			ORBIT = CreateOrbit([3463334.0398701429, 1.0E-11, 0, 237.38459898406168, 0, 5.72107730424, 18545.434569902998], 1)
		}
	}

	DATA
	{
		type = double
		sma = 3463334.0398701429

		sensitivity = 2 * Pow(@/sma, 1.5) / Pow(Max(1, @/targetBody.GM()), 0.5) // rate of change of sma in relation to orbital velocity
		multiple = Pow(10, Round(Log(@sensitivity, 10) - 0.5))
		coeff = Round(@sensitivity, @multiple) // sensitivity rounded to a nice round number

		altThreshold1 = Round(@coeff / 2, @multiple)
		altThreshold2 = Round(@coeff / 40, @multiple / 10)
		altThreshold3 = Round(@coeff / 7500 + 0.5) / 2
		distThreshold1 = @altThreshold1 * 2.5
		distThreshold2 = @altThreshold2 / 4

		r1 = @/targetBody.Radius() + @/targetBody.AtmosphereAltitude()
		deltaV = Pow(@/targetBody.GM() / @r1, 0.5) * (Pow(2 * @/sma / (@r1 + @/sma), 0.5) - 1) + Pow(@/targetBody.GM() / @/sma, 0.5) * (1 - Pow(2 * @/r1 / (@r1 + @/sma), 0.5))
	}

	DATA
	{
		type = long

		intAlt = Round(@/sma - @/targetBody.Radius())
		kmDistThreshold1 = Round(@/distThreshold1 / 1000)
	}

	PARAMETER
	{
		ITERATOR
		{
			type = int
			idx = [0, 1]
		}
		name = "Relay"+@idx
		type = All
		title = @/names.ElementAt(@idx)

		rewardFunds = @RelayConstellations:ksoBaseFunds / 10

		PARAMETER
		{
			name = Baseline
			type = VesselParameterGroup

			define = @/vessels.ElementAt(@../idx)

			PARAMETER
			{
				name = NewVessel
				type = NewVessel
			}

			PARAMETER
			{
				name = HasCrew
				type = HasCrew
				minCrew = 0
				maxCrew = 0
			}

			PARAMETER
			{
				name = HasAntenna
				type = HasAntenna
				minAntennaPower = 200000000000 // 200G
				antennaType = RELAY
			}

			PARAMETER
			{
				name = PowerGenerator
				type = Any
				title = Have solar panels onboard
				hideChildren = !@Constellations:DEBUG

				PARAMETER
				{
					name = StockSolarGenerator
					type = PartValidation
					partModule = ModuleDeployableSolarPanel
					hideChildren = !@Constellations:DEBUG
					minCount = 1
				}
			
				PARAMETER:NEEDS[NearFutureSolar]
				{
					name = NFSolarGenerator
					type = PartValidation
					partModule = ModuleCurvedSolarPanel
					hideChildren = !@Constellations:DEBUG
					minCount = 1
				}
			
				PARAMETER:NEEDS[Kopernicus]
				{
					name = KopernicusSolarGenerator
					type = PartValidation
					partModule = KopernicusSolarPanel
					hideChildren = !@Constellations:DEBUG
					minCount = 1
				}
			}

			PARAMETER
			{
				name = VesselIsType
				type = VesselIsType
				vesselType = Relay
				disableOnStateChange = false
			}

			PARAMETER
			{
				name = Orbit
				type = Orbit

				minPeA = Max(0, @/intAlt - @/altThreshold1)
				maxApA = @/intAlt + @/altThreshold1

				maxInclination = 0.1
			}

			PARAMETER
			{
				name = Rendezvous
				type = Rendezvous

				title = Keep the relay within @/kmDistThreshold1.Print() km of the @/markers.ElementAt(@../../idx)
				hideChildren = !@Constellations:DEBUG

				disableOnStateChange = false

				vessel = @/markers.ElementAt(@../../idx)
				distance = @/distThreshold1
			}

			duration = 2d
		}

		PARAMETER
		{
			name = Precision1
			type = VesselParameterGroup

			vessel = @/vessels.ElementAt(@../idx)

			title = "Circularize at "+@/intAlt.Print()+" m with less than "+@/altThreshold2.ToString("N0")+" m deviation (Optional)"

			optional = True
			rewardReputation = @Constellations:precisionReputation
			rewardFunds = @Constellations:precisionFunds

			PARAMETER
			{
				name = Precision1Orbit
				type = Orbit
				hidden = !@Constellations:DEBUG
				hideChildren = !@Constellations:DEBUG

				minPeA = Max(0, @/intAlt - @/altThreshold2)
				maxApA = @/intAlt + @/altThreshold2
			}

			duration = 2s
		}

		PARAMETER
		{
			name = Precision2
			type = VesselParameterGroup

			vessel = @/vessels.ElementAt(@../idx)

			title = "Circularize at "+@/intAlt.Print()+" m with less than "+@/altThreshold3.ToString("N0")+" m deviation (Optional)"

			optional = True
			rewardReputation = 2 * @Constellations:precisionReputation
			rewardFunds = 2 * @Constellations:precisionFunds

			PARAMETER
			{
				name = Precision2Orbit
				type = Orbit
				hidden = !@Constellations:DEBUG
				hideChildren = !@Constellations:DEBUG

				minPeA = Max(0, @/intAlt - @/altThreshold3)
				maxApA = @/intAlt + @/altThreshold3
			}

			duration = 2s
		}

		PARAMETER
		{
			name = Precision3
			type = VesselParameterGroup

			vessel = @/vessels.ElementAt(@../idx)

			title = "Place the relay within "+@/distThreshold2.ToString("N0")+" m of the "+@/markers.ElementAt(@../idx)+" (Optional)"

			optional = True
			rewardReputation = @Constellations:precisionReputation
			rewardFunds = @Constellations:precisionFunds

			PARAMETER
			{
				name = Precision3Rendezvous
				type = Rendezvous
				hidden = !@Constellations:DEBUG
				hideChildren = !@Constellations:DEBUG

				vessel = @/markers.ElementAt(@../../idx)
				distance = @/distThreshold2
			}
		}
	}

	BEHAVIOUR
	{
		name = DestroyVesselB
		type = DestroyVessel
		onState = PARAMETER_COMPLETED
		parameter = Relay0
		vessel = @/markers.ElementAt(0)
	}

	BEHAVIOUR
	{
		name = DestroyVesselC
		type = DestroyVessel
		onState = PARAMETER_COMPLETED
		parameter = Relay1
		vessel = @/markers.ElementAt(1)
	}
}
