CONTRACT_TYPE
{
	DATA_EXPAND
	{
		type = int
		stages = [1, 2, 3]
	}

	DATA
	{
		type = int
		stage = @stages // ffs
		prev = @/stage - 1
	}

	sortKey = n

	name = LowTechRelay
	group = RelayConstellations

	title = Establish @/ordinal LKO relay

	description = "We need more coverage. Add "+@/ordinal+" relay satellite in the same orbit, but preferably not too close to the previous "+@/ones.ElementAt(@/stage > 1 ? 1 : 0)+" as it would make them redundant."

	completedMessage = The relay is in position and working!

	maxCompletions = 1
	maxSimultaneous = 1

	synopsis = Place another relay satellite in the same orbit as the first one (with sufficient separation).

	prestige = Significant

	maxExpiry = 90

	targetBody = HomeWorld()

	rewardScience = 5
	rewardReputation = (1.5 + @/stage * 0.5) * @RelayConstellations:lowTechReputation
	rewardFunds = (1.5 + @/stage * 0.5) * @RelayConstellations:lowTechFunds
	advanceFunds = @RelayConstellations:lowTechFunds / 2
	failureReputation = @rewardReputation
	failureFunds = @advanceFunds

	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract

		contractType = "LowTechRelay."+@/prev
		cooldownDuration = 1d
	}

	REQUIREMENT
	{
		name = Established
		type = ValidVessel

		vessel = @/relayA
	}

	DATA
	{
		type = string
		ordinal = @/ordinals.ElementAt(@/stage)
		relayA = LKO Relay A
		relayB = LKO Relay B
		relayC = LKO Relay C
		relayD = LKO Relay D
		hidden = true
	}

	DATA
	{
		type = List<string>
		ordinals = ["first", "second", "third", "fourth"]
		relays = [@/relayA, @/relayB, @/relayC, @/relayD]
		ones = ["one", "ones"]
	}

	DATA
	{
		type = double
		minSepatation = Round(1.5 * HomeWorld().Radius(), 10000)
	}

	DATA
	{
		type = long
		intMinSepatation = @/minSepatation
	}

	PARAMETER
	{
		name = Relay
		type = VesselParameterGroup

		define = @/relays.ElementAt(@/stage)

		PARAMETER
		{
			name = NewVessel
			type = NewVessel
		}

		PARAMETER
		{
			name = HasCrew
			type = HasCrew
			minCrew = 0
			maxCrew = 0
		}

		PARAMETER
		{
			name = HasAntenna
			type = HasAntenna
			antennaType = RELAY
			minAntennaPower = 2500000 // half HG-5
		}

		PARAMETER
		{
			name = PowerGenerator
			type = Any
			title = Have solar panels onboard
			hideChildren = !@Constellations:DEBUG

			PARAMETER
			{
				name = StockSolarGenerator
				type = PartValidation
				partModule = ModuleDeployableSolarPanel
				minCount = 1
			}
		
			PARAMETER:NEEDS[NearFutureSolar]
			{
				name = NFSolarGenerator
				type = PartValidation
				partModule = ModuleCurvedSolarPanel
				minCount = 1
			}
		
			PARAMETER:NEEDS[Kopernicus]
			{
				name = KopernicusSolarGenerator
				type = PartValidation
				partModule = KopernicusSolarPanel
				minCount = 1
			}
		}

		PARAMETER
		{
			name = VesselIsType
			type = VesselIsType
			vesselType = Relay
			disableOnStateChange = false
		}

		PARAMETER
		{
			name = Orbit
			type = Orbit

			minAltitude = Vessel(VesselIdentifier("LKO Relay A")).Orbit().Periapsis() * 0.99
			maxAltitude = Vessel(VesselIdentifier("LKO Relay A")).Orbit().Apoapsis() * 1.01

			maxEccentricity = 0.05

			maxInclination = 2
		}

		PARAMETER
		{
			name = NotTooClose
			type = Not

			disableOnStateChange = false

			PARAMETER
			{
				name = AntiRendezvous
				type = Rendezvous

				REQUIREMENT
				{
					name = Established
					type = ValidVessel

					vessel = @/relays.ElementAt(0)
				}

				disableOnStateChange = false

				//hideChildren = !@Constellations:DEBUG

				vessel = @/relays.ElementAt(0)

				distance = @/minSepatation
			}
		}

		duration = 2s
	}

	//PARAMETER
	//{
	//	name = NotTooClose
	//	type = Not

	//	disableOnStateChange = false

	//	title = Leave minimum @/intMinSepatation m separation from the existing relays
	//	notes = You might have to move the previous relays to create enough space for this one

	//	//hideChildren = !@Constellations:DEBUG

	//}
}
