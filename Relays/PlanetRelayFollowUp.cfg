CONTRACT_TYPE
{
	sortKey = j

	name = PlanetRelayFollowUp
	group = RelayConstellations

	genericTitle = Improve planet's communication coverage
	title = Improve @/targetBody communication coverage
	description = We came to the conclusion that current communication coverage of @/targetBody is severely lacking. Adding two more relays would give us constant coverage for most of the surface.

	synopsis = "Form an equilateral triangle of relays in "+@/targetBody+"'s orbit"
	genericDescription = Form an equilateral triangle of relays in planet's orbit

	completedMessage = The relays are in position and working!

	prestige = Trivial

	maxExpiry = 21

	targetBody = @/planet

	rewardScience = 0
	rewardReputation = @RelayConstellations:relayReputation
	rewardFunds = @RelayConstellations:relayFunds
	advanceFunds = @rewardFunds / 3
	failureReputation = @rewardReputation
	failureFunds = @advanceFunds

	DATA
	{
		type = CelestialBody
		planet = ReachedBodies().Where(b => (!b.IsHomeWorld() && b.IsPlanet() && b.HasSurface() && b.Parent() == HomeWorld().Parent())).SelectUnique()

		requiredValue = true
		uniquenessCheck = GROUP_ACTIVE

		title = The target body has to be a reached planet in the same solar system, that is not a gas giant
	}

	DATA
	{
		type = double
		hidden = true
		homeAntennaPower = (@/targetBody.Parent() == HomeWorld() ? 2 : 200) * 1000000000
		homeWorldMaxDistanceFromStar = HomeWorld().Orbit().Apoapsis() + (HomeWorld().Parent().IsSun() ? 0 : HomeWorld().Parent().Orbit().Apoapsis())
		maximumSeparation = @/targetBody.Orbit().Apoapsis() + (@/targetBody.Parent() == HomeWorld() ? 0 : @/targetBody.Parent().Orbit().Apoapsis() + @homeWorldMaxDistanceFromStar)
		requiredAntennaPower = Pow(@maximumSeparation + @/targetBody.SphereOfInfluence(), 2) / @/homeAntennaPower
	}

	DATA
	{
		type = string
		relayA = @/targetBody+" Relay A"
		relayB = @/targetBody+" Relay B"
		relayC = @/targetBody+" Relay C"
		markerB = @/targetBody+" Relay Marker B"
		markerC = @/targetBody+" Relay Marker C"
		hidden = true
	}

	DATA
	{
		type = Vessel
		ogRelay = Vessel(VesselIdentifier(@/relayA))
		hidden = true
	}

	DATA
	{
		type = List<string>
		relays = [ @/relayB, @/relayC ]
		names = ["The first relay", "The second relay"]
		markers = [ @/markerB, @/markerC ]
	}

	REQUIREMENT
	{
		name = Established
		type = ValidVessel

		vessel = @/relayA
	}

	REQUIREMENT
	{
		name = NotEstablished
		type = ValidVessel

		vessel = @/relayB
		invertRequirement = true
	}

	REQUIREMENT
	{
		name = NotEstablished
		type = ValidVessel

		vessel = @/relayC
		invertRequirement = true
	}

	DATA
	{
		type = double
		hidden = true

		minAlt = (@/targetBody.HasAtmosphere() ? (@/targetBody.Radius() + @/targetBody.AtmosphereAltitude()) : (@/targetBody.Radius() * 1.01))
		maxAlt = @/targetBody.SphereOfInfluence() * 0.9
		maxEcc = 0.001
	}

	REQUIREMENT
	{
		name = StillValid
		type = Expression

		expression = @/ogRelay.CelestialBody() == @/targetBody && @/ogRelay.Orbit().Eccentricity() <= @/maxEcc && @/ogRelay.Orbit().Periapsis() >= @/minAlt && @/ogRelay.Orbit().Apoapsis() <= @/maxAlt
		title = The original relay is still in a valid orbit
	}

	REQUIREMENT
	{
		name = Cooldown
		type = Expression

		expression = @/ogRelay.MET() > @Constellations:constellationCD
		title = At least @Constellations:constellationCD has passed since the original relay was established
	}

	REQUIREMENT
	{
		name = Rendezvous
		type = Rendezvous

		targetBody = HomeWorld()
	}

	BEHAVIOUR
	{
		name = SpawnVessel
		type = SpawnVessel

		VESSEL
		{
			name = @/markers.ElementAt(0)
			craftPart = constellations-dummy
			owned = False
			targetBody = @/targetBody
			vesselType = DroppedPart

			ORBIT
			{
				SMA = @/ogRelay.Orbit().SemiMajorAxis()
				ECC = @/ogRelay.Orbit().Eccentricity()
				INC = @/ogRelay.Orbit().Inclination()
				LPE = @/ogRelay.Orbit().ArgumentOfPeriapsis()
				LAN = @/ogRelay.Orbit().LAN()
				MNA = @/ogRelay.Orbit().MeanAnomalyAtEpoch() - 2.0943951
				EPH = @/ogRelay.Orbit().Epoch()
				REF = 0 // ignored
			}
		}

		VESSEL
		{
			name = @/markers.ElementAt(1)
			craftPart = constellations-dummy
			owned = False
			targetBody = @/targetBody
			vesselType = DroppedPart

			ORBIT
			{
				SMA = @/ogRelay.Orbit().SemiMajorAxis()
				ECC = @/ogRelay.Orbit().Eccentricity()
				INC = @/ogRelay.Orbit().Inclination()
				LPE = @/ogRelay.Orbit().ArgumentOfPeriapsis()
				LAN = @/ogRelay.Orbit().LAN()
				MNA = @/ogRelay.Orbit().MeanAnomalyAtEpoch() + 2.0943951
				EPH = @/ogRelay.Orbit().Epoch()
				REF = 0 // ignored
			}
		}
	}

	DATA
	{
		type = long
		intAp = @/ogRelay.Orbit().Apoapsis()
		intPe = @/ogRelay.Orbit().Periapsis()
	}

	DATA
	{
		type = double

		magnitude = Round(Log(@/intAp, 10), 1)
		g1 = Pow(10, Max(@magnitude-4, 2))
		g2 = Max(Pow(10, @magnitude-7), 0.5)

		oPrecision0 = Max(Round(@/intAp / 500, @g1), 20 * @g1)
		oPrecision1 = Max(Round(@/intAp / 10000, @g1), @g1)
		oPrecision2 = Max(Round(@/intAp / 10000000, @g2), @g2)
		dPrecision0 = Max(Round(@/intAp / 250000, 2000 * @g2), 2000 * @g2)
		dPrecision1 = Max(Round(@/intAp / 10000000, 200 * @g2), 200 * @g2)
	}

	PARAMETER
	{
		ITERATOR
		{
			type = int
			idx = [0, 1]
		}
		name = "Relay"+@idx
		type = All
		title = @/names.ElementAt(@idx)

		rewardFunds = @RelayConstellations:relayFunds / 3

		PARAMETER
		{
			name = Baseline
			type = VesselParameterGroup

			define = @/relays.ElementAt(@../idx)

			PARAMETER
			{
				name = NewVessel
				type = NewVessel
			}

			PARAMETER
			{
				name = HasCrew
				type = HasCrew
				minCrew = 0
				maxCrew = 0
			}

			PARAMETER
			{
				name = HasAntenna
				type = HasAntenna
				minAntennaPower = @/requiredAntennaPower
				antennaType = RELAY
			}

			PARAMETER
			{
				name = Any
				type = Any
				title = Have a power generator onboard

				PARAMETER
				{
					name = PartValidation
					type = PartValidation
					title = 1 or more solar panels
					hideChildren = !@Constellations:DEBUG

					partModule = ModuleDeployableSolarPanel
					minCount = 1
				}

				PARAMETER
				{
					name = PartValidation
					type = PartValidation
					title = 1 or more generators
					hideChildren = !@Constellations:DEBUG
					
					partModule = ModuleGenerator
					minCount = 1
				}

				PARAMETER:NEEDS[NearFutureSolar]
				{
					name = PartValidation
					type = PartValidation
					title = 1 or more curved solar panels
					hideChildren = !@Constellations:DEBUG
					
					partModule = ModuleCurvedSolarPanel
					minCount = 1
				}

				PARAMETER:NEEDS[NearFutureElectrical]
				{
					name = PartValidation
					type = PartValidation
					title = 1 or more fission reactors
					hideChildren = !@Constellations:DEBUG
					partModule = FissionReactor
					minCount = 1
				}

				PARAMETER:NEEDS[NearFutureElectrical]
				{
					name = PartValidation
					type = PartValidation
					title = 1 or more radioisotope generators
					hideChildren = !@Constellations:DEBUG
					partModule = ModuleRadioisotopeGenerator
					minCount = 1
				}

				PARAMETER:NEEDS[Kopernicus]
				{
					name = PartValidation
					type = PartValidation
					hideChildren = !@Constellations:DEBUG
					title = 1 or more solar panels
					partModule = KopernicusSolarPanel
					minCount = 1
				}
			}

			PARAMETER
			{
				name = Orbit
				type = Orbit

				minPeA = Max(0, @/intPe - @/oPrecision0)
				maxPeA = @/intPe + @/oPrecision0
				minApA = Max(0, @/intAp - @/oPrecision0)
				maxApA = @/intAp + @/oPrecision0

				minInclination = Max(0, @/ogRelay.Orbit().Inclination() - 0.1)
				maxInclination = Min(180, @/ogRelay.Orbit().Inclination() + 0.1)
			}

			PARAMETER
			{
				name = Rendezvous
				type = Rendezvous

				title = "Place the relay within "+@/dPrecision0.ToString("0")+"m of the "+@/markers.ElementAt(@../../idx)
				hideChildren = !@Constellations:DEBUG

				disableOnStateChange = true

				vessel = @/markers.ElementAt(@../../idx)
				distance = @/dPrecision0
			}

			duration = 2d
		}

		PARAMETER
		{
			name = Precision1
			type = VesselParameterGroup

			vessel = @/relays.ElementAt(@../idx)

			title = "Match "+@/ogRelay+"'s orbit with less than "+@/oPrecision1.ToString("0")+"m deviation (Optional)"

			optional = True
			rewardReputation = @Constellations:precisionReputation
			rewardFunds = @Constellations:precisionFunds

			PARAMETER
			{
				name = Precision1Orbit
				type = Orbit

				minPeA = Max(0, @/intPe - @/oPrecision1)
				maxPeA = @/intPe + @/oPrecision1
				minApA = Max(0, @/intAp - @/oPrecision1)
				maxApA = @/intAp + @/oPrecision1
			}

			duration = 2s
		}

		PARAMETER
		{
			name = Precision2
			type = VesselParameterGroup

			vessel = @/relays.ElementAt(@../idx)

			title = "Match "+@/ogRelay+"'s orbit with less than "+@/oPrecision2.ToString("0")+"m deviation (Optional)"

			optional = True
			rewardReputation = @Constellations:precisionReputation
			rewardFunds = @Constellations:precisionFunds

			PARAMETER
			{
				name = Precision2Orbit
				type = Orbit

				minPeA = Max(0, @/intPe - @/oPrecision2)
				maxPeA = @/intPe + @/oPrecision2
				minApA = Max(0, @/intAp - @/oPrecision2)
				maxApA = @/intAp + @/oPrecision2
			}

			duration = 2s
		}

		PARAMETER
		{
			name = Precision3
			type = VesselParameterGroup

			vessel = @/relays.ElementAt(@../idx)

			title = "Place the relay within "+@/dPrecision1.ToString("0")+"m of the "+@/markers.ElementAt(@../idx)+" (Optional)"

			optional = True
			rewardReputation = @Constellations:precisionReputation
			rewardFunds = @Constellations:precisionFunds

			PARAMETER
			{
				name = Precision3Rendezvous
				type = Rendezvous
				hidden = !@Constellations:DEBUG
				hideChildren = !@Constellations:DEBUG

				vessel = @/markers.ElementAt(@../../idx)
				distance = @/dPrecision1
			}
		}
	}
	
	BEHAVIOUR
	{
		name = DestroyVesselB
		type = DestroyVessel
		onState = PARAMETER_COMPLETED
		parameter = Relay0
		vessel = @/markers.ElementAt(0)
	}

	BEHAVIOUR
	{
		name = DestroyVesselC
		type = DestroyVessel
		onState = PARAMETER_COMPLETED
		parameter = Relay1
		vessel = @/markers.ElementAt(1)
	}
}