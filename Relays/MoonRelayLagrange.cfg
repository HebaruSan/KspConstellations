CONTRACT_TYPE
{
	sortKey = d

	name = ConstellationsMoonRelayLagrange
	group = RelayConstellations

	genericTitle = Establish relay at moon's Lagrange point
	title = Establish relay at @/targetBody's @/point Lagrange point
	description = "Our client wants a stationary relay in orbit of @targetBody which is a problem since a stationary orbit is not possible for @targetBody"+". Luckily, we managed to convince them that a relay in the "+@/point+" Lagrange point would be functionally the same. \nYour job is to establish said relay."

	maxSimultaneous = 1

	synopsis = Place a relay satellite at a @/point point of @/targetBody
	genericDescription = Place a relay satellite at moon Lagrange point

	completedMessage = The relay is in position and working!

	prestige = Trivial

	maxExpiry = 21

	targetBody = @/tidalMoon

	rewardScience = 0
	rewardReputation = @RelayConstellations:moonRelayReputation
	rewardFunds = @RelayConstellations:moonRelayFunds + @RelayConstellations:newRelayFunds
	advanceFunds = @rewardFunds / 3
	failureReputation = @rewardReputation
	failureFunds = @advanceFunds

	DATA
	{
		type = Boolean
		coMoon = HomeWorld().Parent().IsPlanet()
		hidden = True
	}

	DATA
	{
		type = CelestialBody
		tidalMoon = (@/coMoon ? HomeWorld().Parent().Children() : HomeWorld().Children()).Where(b => (b.Orbit().Period() == b.RotationalPeriod())).SelectUnique()
		uniquenessCheck = CONTRACT_ACTIVE

		title = "Target body must be "+HomeWorld()+"'s tidally locked moon or co-moon"
	}

	DATA
	{
		type = List<string>
		points = ["L4", "L5"]
	}

	DATA
	{
		type = string
		point = @/points.SelectUnique()
		uniquenessCheck = CONTRACT_ACTIVE
		hidden = true
	}

	DATA
	{
		type = string
		marker = @/targetBody+" "+@/point+" Relay Marker"
		relay = @/targetBody+" "+@/point+" Relay"
		hidden = true
	}

	REQUIREMENT
	{
		name = NotEstablished
		type = ValidVessel

		vessel = @/relay
		invertRequirement = true
	}

	REQUIREMENT
	{
		name = Orbit
		type = Orbit
	}

	REQUIREMENT
	{
		name = Rendezvous
		type = Rendezvous

		targetBody = HomeWorld()
	}

	// don't spam contracts before first relay unlocks
	REQUIREMENT
	{
		name = TechResearched
		type = TechResearched

		part = HighGainAntenna5
	}

	DATA
	{
		type = double
		requiredAntennaPower = Pow(@/targetBody.Orbit().Apoapsis() + @/targetBody.SphereOfInfluence() + (@/coMoon ? HomeWorld().Orbit().Apoapsis() : 0), 2) / 2000000000 // assume 2G at home
	}

	BEHAVIOUR
	{
		name = SpawnVessel
		type = SpawnVessel

		VESSEL
		{
			name = @/marker
			craftPart = constellations-dummy
			owned = False
			targetBody = @/targetBody.Parent()
			vesselType = DroppedPart

			ORBIT
			{
				SMA = @/targetBody.Orbit().SemiMajorAxis()
				ECC = @/targetBody.Orbit().Eccentricity() + 1.0E-11
				INC = @/targetBody.Orbit().Inclination() + 1.0E-11
				LPE = @/targetBody.Orbit().ArgumentOfPeriapsis()
				LAN = @/targetBody.Orbit().LAN() + 1.0E-11
				MNA = @/targetBody.Orbit().MeanAnomalyAtEpoch() - 5.23598775598 * (@/point == "L4" ? 1 : -1)
				EPH = @/targetBody.Orbit().Epoch() + 1.0E-11
				REF = 0 // ignored
			}
		}
	}

	DATA
	{
		type = long
		intAlt = @/targetBody.Orbit().SemiMajorAxis() - @targetBody.Parent().Radius()
	}

	DATA
	{
		type = double

		magnitude = Round(Log(@/intAlt, 10), 1)
		g1 = Pow(10, Max(@magnitude-4, 2))
		g2 = Max(Pow(10, @magnitude-7), 0.5)

		oPrecision0 = Max(Round(@/intAlt / 500, @g1), 20 * @g1)
		oPrecision1 = Max(Round(@/intAlt / 10000, @g1), @g1)
		oPrecision2 = Max(Round(@/intAlt / 10000000, @g2), @g2)
		dPrecision0 = Max(Round(@/intAlt / 25000, 20000 * @g2), 20000 * @g2)
		dPrecision1 = Max(Round(@/intAlt / 10000000, 200 * @g2), 200 * @g2)
	}

	PARAMETER
	{
		name = Relay
		type = VesselParameterGroup

		define = @/relay

		PARAMETER
		{
			name = NewVessel
			type = NewVessel
		}

		PARAMETER
		{
			name = HasCrew
			type = HasCrew
			minCrew = 0
			maxCrew = 0
		}

		PARAMETER
		{
			name = HasAntenna
			type = HasAntenna
			minAntennaPower = @/requiredAntennaPower
			antennaType = RELAY
		}

		PARAMETER
		{
			name = Any
			type = Any
			title = Have a power generator onboard

			PARAMETER
			{
				name = PartValidation
				type = PartValidation
				title = 1 or more solar panels
				hideChildren = !@Constellations:DEBUG
				partModule = ModuleDeployableSolarPanel
				minCount = 1
			}

			PARAMETER
			{
				name = PartValidation
				type = PartValidation
				title = 1 or more generators
				hideChildren = !@Constellations:DEBUG
				partModule = ModuleGenerator
				minCount = 1
			}

			PARAMETER:NEEDS[NearFutureSolar]
			{
				name = PartValidation
				type = PartValidation
				title = 1 or more curved solar panels
				hideChildren = !@Constellations:DEBUG
				partModule = ModuleCurvedSolarPanel
				minCount = 1
			}

			PARAMETER:NEEDS[NearFutureElectrical]
			{
				name = PartValidation
				type = PartValidation
				title = 1 or more fission reactors
				hideChildren = !@Constellations:DEBUG
				partModule = FissionReactor
				minCount = 1
			}

			PARAMETER:NEEDS[NearFutureElectrical]
			{
				name = PartValidation
				type = PartValidation
				title = 1 or more radioisotope generators
				hideChildren = !@Constellations:DEBUG
				partModule = ModuleRadioisotopeGenerator
				minCount = 1
			}

			PARAMETER:NEEDS[Kopernicus]
			{
				name = PartValidation
				type = PartValidation
				title = 1 or more solar panels
				hideChildren = !@Constellations:DEBUG
				partModule = KopernicusSolarPanel
				minCount = 1
			}
		}

		PARAMETER
		{
			name = VesselIsType
			type = VesselIsType
			vesselType = Relay
			disableOnStateChange = false
		}

		PARAMETER
		{
			name = Orbit
			type = Orbit

			targetBody = @/targetBody.Parent()

			minPeA = Max(0, @/targetBody.Orbit().Periapsis() - @/oPrecision0)
			maxApA = @/targetBody.Orbit().Apoapsis() + @/oPrecision0

			minInclination = Max(0, @/targetBody.Orbit().Inclination() - 0.1)
			maxInclination = Min(180, @/targetBody.Orbit().Inclination() + 0.1)
		}

		PARAMETER
		{
			name = Rendezvous
			type = Rendezvous

			title = "Place the relay within "+@/dPrecision0.ToString("0")+"m of the marker"
			hideChildren = !@Constellations:DEBUG

			disableOnStateChange = false

			vessel = @/marker
			distance = @/dPrecision0
		}

		duration = 2d
	}

	PARAMETER
	{
		name = Precision1
		type = VesselParameterGroup

		REQUIREMENT
		{
			name = CircularOrbit
			type = Expression

			title = Target body must have a circular orbit
			expression = @/targetBody.Orbit().Eccentricity() == 0
		}

		vessel = @/relay

		title = "Circularize at "+@/intAlt+"m with less than "+@/oPrecision1.ToString("0")+"m deviation (Optional)"

		optional = True
		rewardReputation = @Constellations:precisionReputation
		rewardFunds = @Constellations:precisionFunds

		PARAMETER
		{
			name = Precision1Orbit
			type = Orbit
			hidden = !@Constellations:DEBUG
			hideChildren = !@Constellations:DEBUG

			targetBody = @/targetBody.Parent()

			minPeA = Max(0, @/intAlt - @/oPrecision1)
			maxApA = @/intAlt + @/oPrecision1
		}

		duration = 2s
	}

	PARAMETER
	{
		name = Precision2
		type = VesselParameterGroup

		REQUIREMENT
		{
			name = CircularOrbit
			type = Expression

			title = Target body must have a circular orbit
			expression = @/targetBody.Orbit().Eccentricity() == 0
		}

		vessel = @/relay

		title = "Circularize at "+@/intAlt+"m with less than "+@/oPrecision2.ToString("0")+"m deviation (Optional)"

		optional = True
		rewardReputation = 2 * @Constellations:precisionReputation
		rewardFunds = 2 * @Constellations:precisionFunds

		PARAMETER
		{
			name = Precision2Orbit
			type = Orbit
			hidden = !@Constellations:DEBUG
			hideChildren = !@Constellations:DEBUG

			targetBody = @/targetBody.Parent()

			minPeA = Max(0, @/intAlt - @/oPrecision2)
			maxApA = @/intAlt + @/oPrecision2
		}

		duration = 2s
	}

	PARAMETER
	{
		name = Precision3
		type = VesselParameterGroup

		vessel = @/relay

		title = "Place the relay within "+@/dPrecision1.ToString("0")+"m of the marker (Optional)"

		optional = True
		rewardReputation = @Constellations:precisionReputation
		rewardFunds = @Constellations:precisionFunds

		PARAMETER
		{
			name = Precision3Rendezvous
			type = Rendezvous
			hidden = !@Constellations:DEBUG
			hideChildren = !@Constellations:DEBUG

			vessel = @/marker
			distance = @/dPrecision1
		}
	}

	BEHAVIOUR
	{
		name = DestroyVessel
		type = DestroyVessel
		onState = CONTRACT_COMPLETED
		vessel = @/marker
	}
}
