CONTRACT_TYPE
{
	sortKey = d

	name = ConstellationsRelay
	group = RelayConstellations

	genericTitle = Establish a relay (tracking station level @/trackingStationLevel)
	title = Establish @/targetBody relay
	description = "We want't you to place a relay satellite in circular orbit around @/targetBody"+". It will prove useful in our future missions to @/targetBody"+".\nYou are allowed to reuse an existing vessel as the relay."

	synopsis = Place a relay satellite in orbit around @/targetBody
	genericDescription = Place a relay satellite in orbit around the body

	completedMessage = The relay is in position and working!

	prestige = Trivial
	prestige = Significant

	targetBody = @/targetBody1

	rewardScience = 0
	rewardReputation = 15
	rewardFunds = 25000.0
	advanceFunds = 10000.0
	failureReputation = 20
	failureFunds = 20000.0

	DATA_EXPAND
	{
		type = int
		trackingStationLevel = [ 1, 2, 3 ]
	}

	REQUIREMENT
	{
		name = Any
		type = Any

		REQUIREMENT
		{
			name = All
			type = All

			REQUIREMENT
			{
				name = Facility
				type = Facility

				facility = TrackingStation

				minLevel = @/trackingStationLevel
				maxLevel = @/trackingStationLevel
				checkOnActiveContract = false
			}

			REQUIREMENT
			{
				name = CompleteContract
				type = CompleteContract

				contractType = ConstellationsKsoRelayFollowUp
				invertRequirement = true
				checkOnActiveContract = false
			}
		}

		REQUIREMENT
		{
			name = All
			type = All

			REQUIREMENT
			{
				name = Expression
				type = Expression

				title = The contract must be level 3
				expression = @/trackingStationLevel == 3
			}

			REQUIREMENT
			{
				name = CompleteContract
				type = CompleteContract

				contractType = ConstellationsKsoRelayFollowUp
				checkOnActiveContract = false
			}
		}
	}

	DATA
	{
		type = double
		hidden = true
		homeAntennaPower = [ 2, 50, 200 ].ElementAt(@/trackingStationLevel - 1) * 1000000000
		requiredAntennaPower = Pow(MaximumSeparation(HomeWorld(), @/targetBody) + @/targetBody.SphereOfInfluence(), 2) / @/homeAntennaPower
	}
	
	DATA
	{
		type = CelestialBody
		targetBody1 = OrbitedBodies().Where(b => !b.IsHomeWorld() && b.HasSurface()).SelectUnique()

		requiredValue = true
		uniquenessCheck = GROUP_ACTIVE

		title = The target body has to be orbited before, can't be the home world, a star, or a gas giant
	}

	REQUIREMENT
	{
		name = Expression
		type = Expression

		title = Must not have any relays established around the target body
		expression = AllVessels().Where( v => v.CelestialBody() == @/targetBody && v.VesselType() == Relay && v.IsOrbiting()).Count() == 0
	}

	REQUIREMENT
	{
		name = Any
		type = Any

		REQUIREMENT
		{
			name = All
			type = All

			REQUIREMENT
			{
				name = Expression
				type = Expression

				title = Required antenna power has to be less than 15M
				expression = @/requiredAntennaPower < (3 * 5000000)
			}

			REQUIREMENT
			{
				name = TechResearched
				type = TechResearched

				part = HighGainAntenna5
			}
		}

		REQUIREMENT
		{
			name = All
			type = All

			REQUIREMENT
			{
				name = Expression
				type = Expression

				title = Required antenna power has to be less than 6G
				expression = @/requiredAntennaPower < (3 * 2000000000)
			}

			REQUIREMENT
			{
				name = TechResearched
				type = TechResearched

				part = RelayAntenna5
			}
		}

		REQUIREMENT
		{
			name = All
			type = All

			REQUIREMENT
			{
				name = Expression
				type = Expression

				title = Required antenna power has to be less than 45G
				expression = @/requiredAntennaPower < (3 * 15000000000)
			}

			REQUIREMENT
			{
				name = TechResearched
				type = TechResearched

				part = RelayAntenna50
			}
		}

		REQUIREMENT
		{
			name = TechResearched
			type = TechResearched

			part = RelayAntenna100
		}
	}

	PARAMETER
	{
		name = VesselParameterGroup
		type = VesselParameterGroup

		define = the relay
		dissassociateVesselsOnContractCompletion = true

		PARAMETER
		{
			name = Orbit
			type = Orbit

			minAltitude = @/targetBody.HasAtmosphere() ? (@/targetBody.Radius() + @/targetBody.AtmosphereAltitude()) : (@/targetBody.Radius() * 1.01)
			maxAltitude = @/targetBody.SphereOfInfluence() * 0.9

			maxEccentricity = 0.001

			notes = You are free to pick any sufficiently high circular orbit
		}

		PARAMETER
		{
			name = VesselIsType
			type = VesselIsType
			vesselType = Relay
		}

		PARAMETER
		{
			name = HasCrew
			type = HasCrew
			minCrew = 0
			maxCrew = 0
		}

		PARAMETER
		{
			name = HasAntenna
			type = HasAntenna
			minAntennaPower = @/requiredAntennaPower
			antennaType = RELAY
			notes = This might require multiple antennas, remember that combining antennas is non-linear.\nAlso note that difficulty settings alters the antenna power, so there might be a mismatch between antenna ratings shown in VAB and the actual power.
		}

		PARAMETER
		{
			name = Any
			type = Any
			title = Have a power generator onboard

			PARAMETER
			{
				name = PartValidation
				type = PartValidation
				title = 1 or more solar panels
				hideChildren = !@Constellations:DEBUG
				partModule = ModuleDeployableSolarPanel
				minCount = 1
			}

			PARAMETER
			{
				name = PartValidation
				type = PartValidation
				title = 1 or more generators
				hideChildren = !@Constellations:DEBUG
				partModule = ModuleGenerator
				minCount = 1
			}

			PARAMETER:NEEDS[NearFutureSolar]
			{
				name = PartValidation
				type = PartValidation
				title = 1 or more curved solar panels
				hideChildren = !@Constellations:DEBUG
				partModule = ModuleCurvedSolarPanel
				minCount = 1
			}

			PARAMETER:NEEDS[NearFutureElectrical]
			{
				name = PartValidation
				type = PartValidation
				title = 1 or more fission reactors
				hideChildren = !@Constellations:DEBUG
				partModule = FissionReactor
				minCount = 1
			}

			PARAMETER:NEEDS[NearFutureElectrical]
			{
				name = PartValidation
				type = PartValidation
				title = 1 or more radioisotope generators
				hideChildren = !@Constellations:DEBUG
				partModule = ModuleRadioisotopeGenerator
				minCount = 1
			}

			PARAMETER:NEEDS[Kopernicus]
			{
				name = PartValidation
				type = PartValidation
				title = 1 or more solar panels
				hideChildren = !@Constellations:DEBUG
				partModule = KopernicusSolarPanel
				minCount = 1
			}
		}

		duration = 2d
	}
	
	PARAMETER
	{
		name = VesselParameterGroup
		type = VesselParameterGroup

		vessel = the relay

		title = Launch a new vessel (optional)

		optional = True

		rewardReputation = 5
		rewardFunds = 10000.0

		PARAMETER
		{
			name = NewVessel
			type = NewVessel
		}
	}

	PARAMETER
	{
		name = VesselParameterGroup
		type = VesselParameterGroup

		vessel = the relay
		
		title = Circularize with eccentricity less than 0.00005

		optional = True

		rewardReputation = 10.0
		rewardFunds = 5000.0 / (Prestige().Multiplier() * @/targetBody.Multiplier()) // TODO

		PARAMETER
		{
			name = Orbit
			type = Orbit

			maxEccentricity = 0.00005
		}

		duration = 5s
	}
}



CONTRACT_TYPE
{
	sortKey = e

	name = ConstellationsRelayFollowUp
	group = RelayConstellations

	genericTitle = Improve body's communication coverage (tracking station level @/trackingStationLevel)
	title = Improve @/targetBody communication coverage
	description = We came to the conclusion that current communication coverage of @/targetBody is severely lacking. Adding two more relays would give us constant coverage for most of the surface.

	synopsis = Place two more relay satellites in orbit around @/targetBody
	genericDescription = Place two more relay satellites in orbit around the body

	completedMessage = The relays are in position and working!

	prestige = Trivial

	targetBody = @/targetBody1

	// TODO
	rewardScience = 0
	rewardReputation = 15
	rewardReputation = 15
	rewardFunds = 25000.0
	advanceFunds = 10000.0
	failureReputation = 20
	failureFunds = 20000.0

	DATA_EXPAND
	{
		type = int
		trackingStationLevel = [ 1, 2, 3 ]
	}

	REQUIREMENT
	{
		name = Any
		type = Any

		REQUIREMENT
		{
			name = All
			type = All

			REQUIREMENT
			{
				name = Facility
				type = Facility

				facility = TrackingStation

				minLevel = @/trackingStationLevel
				maxLevel = @/trackingStationLevel
				checkOnActiveContract = false
			}

			REQUIREMENT
			{
				name = CompleteContract
				type = CompleteContract

				contractType = ConstellationsKsoRelayFollowUp
				invertRequirement = true
				checkOnActiveContract = false
			}
		}

		REQUIREMENT
		{
			name = All
			type = All

			REQUIREMENT
			{
				name = Expression
				type = Expression

				title = The contract must be level 3
				expression = @/trackingStationLevel == 3
			}

			REQUIREMENT
			{
				name = CompleteContract
				type = CompleteContract

				contractType = ConstellationsKsoRelayFollowUp
				checkOnActiveContract = false
			}
		}
	}

	DATA
	{
		type = double
		hidden = true
		homeAntennaPower = [ 2, 50, 200 ].ElementAt(@/trackingStationLevel - 1) * 1000000000
		requiredAntennaPower = Pow(MaximumSeparation(HomeWorld(), @/targetBody) + @/targetBody.SphereOfInfluence(), 2) / @/homeAntennaPower
	}

	DATA
	{
		type = CelestialBody
		targetBody1 = OrbitedBodies().Where(b => !b.IsHomeWorld() && b.HasSurface()).SelectUnique()

		requiredValue = true
		uniquenessCheck = GROUP_ACTIVE

		title = The target body has to be orbited before, can't be the home world, a star, or a gas giant
	}

	REQUIREMENT
	{
		name = Expression
		type = Expression

		title = Must have a single relay around the target body
		expression = AllVessels().Where( v => v.CelestialBody() == @/targetBody && v.VesselType() == Relay && v.IsOrbiting()).Count() == 1
	}

	DATA
	{
		type = Vessel
		ogRelay = AllVessels().Where( v => v.CelestialBody() == @/targetBody && v.VesselType() == Relay && v.IsOrbiting()).First()

		requiredValue = true
		hidden = true
	}

	DATA
	{
		type = double
		minAlt = @/targetBody.HasAtmosphere() ? (@/targetBody.Radius() + @/targetBody.AtmosphereAltitude()) : (@/targetBody.Radius() * 1.01)
		maxAlt = @/targetBody.SphereOfInfluence() * 0.9
		minPeriod = @/ogRelay.Orbit().Period()*0.9999
		maxPeriod = @/ogRelay.Orbit().Period()*1.0001
	}

	REQUIREMENT
	{
		name = Expression
		type = Expression

		title = Original relay must be powerful enough to reach homeworld and be in a high enough circular orbit
		expression = (@/ogRelay.AntennaRelayPower() >= @/requiredAntennaPower) && (@/ogRelay.Orbit().Periapsis() >= @/minAlt) && (@/ogRelay.Orbit().Apoapsis() <= @/maxAlt) && (@/ogRelay.Orbit().Eccentricity() <= 0.001)
	}

	REQUIREMENT
	{
		name = Rendezvous
		type = Rendezvous

		targetBody = HomeWorld()
	}

	BEHAVIOUR
	{
		name = SpawnVessel
		type = SpawnVessel

		VESSEL
		{
			name = "@/targetBody Relay Marker A"
			craftPart = constellations-dummy
			owned = False
			targetBody = @/targetBody
			vesselType = DroppedPart

			ORBIT
			{
				SMA = @/ogRelay.Orbit().SemiMajorAxis()
				ECC = @/ogRelay.Orbit().Eccentricity()
				INC = @/ogRelay.Orbit().Inclination()
				LPE = @/ogRelay.Orbit().ArgumentOfPeriapsis()
				LAN = @/ogRelay.Orbit().LAN()
				MNA = @/ogRelay.Orbit().MeanAnomalyAtEpoch() - 2.0943951
				EPH = @/ogRelay.Orbit().Epoch()
				REF = 0 // ignored
			}
		}
	}

	BEHAVIOUR
	{
		name = SpawnVessel
		type = SpawnVessel

		VESSEL
		{
			name = "@/targetBody Relay Marker B"
			craftPart = constellations-dummy
			owned = False
			targetBody = @/targetBody
			vesselType = DroppedPart

			ORBIT
			{
				SMA = @/ogRelay.Orbit().SemiMajorAxis()
				ECC = @/ogRelay.Orbit().Eccentricity()
				INC = @/ogRelay.Orbit().Inclination()
				LPE = @/ogRelay.Orbit().ArgumentOfPeriapsis()
				LAN = @/ogRelay.Orbit().LAN()
				MNA = @/ogRelay.Orbit().MeanAnomalyAtEpoch() + 2.0943951
				EPH = @/ogRelay.Orbit().Epoch()
				REF = 0 // ignored
			}
		}
	}

	PARAMETER
	{
		name = RelayA
		type = VesselParameterGroup

		define = the first relay
		dissassociateVesselsOnContractCompletion = true

		rewardFunds = 50000.0

		PARAMETER
		{
			name = NewVessel
			type = NewVessel
		}

		PARAMETER
		{
			name = HasCrew
			type = HasCrew
			minCrew = 0
			maxCrew = 0
		}

		PARAMETER
		{
			name = HasAntenna
			type = HasAntenna
			minAntennaPower = @/requiredAntennaPower
			antennaType = RELAY
		}

		PARAMETER
		{
			name = Any
			type = Any
			title = Have a power generator onboard

			PARAMETER
			{
				name = PartValidation
				type = PartValidation
				title = 1 or more solar panels
				hideChildren = !@Constellations:DEBUG

				partModule = ModuleDeployableSolarPanel
				minCount = 1
			}

			PARAMETER
			{
				name = PartValidation
				type = PartValidation
				title = 1 or more generators
				hideChildren = !@Constellations:DEBUG
				
				partModule = ModuleGenerator
				minCount = 1
			}

			PARAMETER:NEEDS[NearFutureSolar]
			{
				name = PartValidation
				type = PartValidation
				title = 1 or more curved solar panels
				hideChildren = !@Constellations:DEBUG
				
				partModule = ModuleCurvedSolarPanel
				minCount = 1
			}

			PARAMETER:NEEDS[NearFutureElectrical]
			{
				name = PartValidation
				type = PartValidation
				title = 1 or more fission reactors
				hideChildren = !@Constellations:DEBUG
				partModule = FissionReactor
				minCount = 1
			}

			PARAMETER:NEEDS[NearFutureElectrical]
			{
				name = PartValidation
				type = PartValidation
				title = 1 or more radioisotope generators
				hideChildren = !@Constellations:DEBUG
				partModule = ModuleRadioisotopeGenerator
				minCount = 1
			}

			PARAMETER:NEEDS[Kopernicus]
			{
				name = PartValidation
				type = PartValidation
				hideChildren = !@Constellations:DEBUG
				title = 1 or more solar panels
				partModule = KopernicusSolarPanel
				minCount = 1
			}
		}

		PARAMETER
		{
			name = Orbit
			type = Orbit

			minPeA = @/ogRelay.Orbit().Periapsis()*0.9999
			maxApA = @/ogRelay.Orbit().Apoapsis()*1.0001

			minPeriod = @/minPeriod
			maxPeriod = @/maxPeriod

			minInclination = Max(@/ogRelay.Orbit().Inclination() - 0.05, 0)
			maxInclination = Min(@/ogRelay.Orbit().Inclination() + 0.05, 180)
		}

		PARAMETER
		{
			name = Rendezvous
			type = Rendezvous

			vessel = "@/targetBody Relay Marker A"
			distance = 10000

			title = Place the relay within 10km of the marker

			disableOnStateChange = true
		}

		duration = 2d
	}

	PARAMETER
	{
		name = VesselParameterGroup
		type = VesselParameterGroup

		vessel = the first relay

		title = Place the first relay within 100m of the marker (Optional)

		optional = True
		rewardReputation = 8.0
		rewardFunds = 5000

		PARAMETER
		{
			name = Rendezvous
			type = Rendezvous

			vessel = "@/targetBody Relay Marker A"
			distance = 100
		}
	}

	PARAMETER
	{
		name = RelayB
		type = VesselParameterGroup

		define = the second relay
		dissassociateVesselsOnContractCompletion = true

		rewardFunds = 50000.0

		PARAMETER
		{
			name = NewVessel
			type = NewVessel
		}

		PARAMETER
		{
			name = HasCrew
			type = HasCrew
			minCrew = 0
			maxCrew = 0
		}

		PARAMETER
		{
			name = HasAntenna
			type = HasAntenna
			minAntennaPower = @/requiredAntennaPower
			antennaType = RELAY
		}

		PARAMETER
		{
			name = Any
			type = Any
			title = Have a power generator onboard

			PARAMETER
			{
				name = PartValidation
				type = PartValidation
				title = 1 or more solar panels
				hideChildren = !@Constellations:DEBUG

				partModule = ModuleDeployableSolarPanel
				minCount = 1
			}

			PARAMETER
			{
				name = PartValidation
				type = PartValidation
				title = 1 or more generators
				hideChildren = !@Constellations:DEBUG
				
				partModule = ModuleGenerator
				minCount = 1
			}

			PARAMETER:NEEDS[NearFutureSolar]
			{
				name = PartValidation
				type = PartValidation
				title = 1 or more curved solar panels
				hideChildren = !@Constellations:DEBUG
				
				partModule = ModuleCurvedSolarPanel
				minCount = 1
			}

			PARAMETER:NEEDS[NearFutureElectrical]
			{
				name = PartValidation
				type = PartValidation
				title = 1 or more fission reactors
				hideChildren = !@Constellations:DEBUG
				partModule = FissionReactor
				minCount = 1
			}

			PARAMETER:NEEDS[NearFutureElectrical]
			{
				name = PartValidation
				type = PartValidation
				title = 1 or more radioisotope generators
				hideChildren = !@Constellations:DEBUG
				partModule = ModuleRadioisotopeGenerator
				minCount = 1
			}

			PARAMETER:NEEDS[Kopernicus]
			{
				name = PartValidation
				type = PartValidation
				hideChildren = !@Constellations:DEBUG
				title = 1 or more solar panels
				partModule = KopernicusSolarPanel
				minCount = 1
			}
		}

		PARAMETER
		{
			name = Orbit
			type = Orbit

			minPeA = @/ogRelay.Orbit().Periapsis()*0.9999
			maxApA = @/ogRelay.Orbit().Apoapsis()*1.0001

			minPeriod = @/minPeriod
			maxPeriod = @/maxPeriod

			minInclination = Max(@/ogRelay.Orbit().Inclination() - 0.05, 0)
			maxInclination = Min(@/ogRelay.Orbit().Inclination() + 0.05, 180)
		}

		PARAMETER
		{
			name = Rendezvous
			type = Rendezvous

			vessel = "@/targetBody Relay Marker B"
			distance = 10000

			title = Place the relay within 10km of the marker

			disableOnStateChange = true
		}

		duration = 2d
	}

	PARAMETER
	{
		name = VesselParameterGroup
		type = VesselParameterGroup

		vessel = the second relay

		title = Place the second relay within 100m of the marker (Optional)

		optional = True
		rewardReputation = 8.0
		rewardFunds = 5000

		PARAMETER
		{
			name = Rendezvous
			type = Rendezvous

			vessel = "@/targetBody Relay Marker B"
			distance = 100
		}
	}

	BEHAVIOUR
	{
		name = DestroyVessel
		type = DestroyVessel
		onState = PARAMETER_COMPLETED
		parameter = RelayA
		vessel = "@/targetBody Relay Marker A"
	}

	BEHAVIOUR
	{
		name = DestroyVessel
		type = DestroyVessel
		onState = PARAMETER_COMPLETED
		parameter = RelayB
		vessel = "@/targetBody Relay Marker B"
	}
}