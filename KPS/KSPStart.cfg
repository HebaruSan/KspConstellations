CONTRACT_TYPE
{
	sortKey = b
	name = KPSStart
	group = KPSConstellations

	title = Begin construction of the KPS
	description = The prototype is working flawlessly, time to add more satellites to test the trilateration. With satellites in the same plane we won't get much accuracy, but it should be enough to test the principle.

	synopsis = Add two more KPS satellites

	maxCompletions = 1
	maxSimultaneous = 1

	completedMessage = Trilateration is working!

	prestige = Significant

	maxExpiry = 21

	targetBody = HomeWorld()

	rewardScience = 0
	rewardReputation = @KPSConstellations:reputation
	rewardFunds = 2 * @KPSConstellations:funds
	advanceFunds = @rewardFunds / 4
	failureReputation = @rewardReputation
	failureFunds = @advanceFunds

	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract

		contractType = KPSPrototype
		cooldownDuration = @Constellations:kpsCD
	}

	DATA
	{
		type = double

		sensitivity = 2 * Pow(@KPSConstellations:sma, 1.5) / Pow(Max(1, @/targetBody.GM()), 0.5) // rate of change of sma in relation to orbital velocity
		multiple = Pow(10, Round(Log(@sensitivity, 10) - 0.5))
		coeff = Round(@sensitivity, @multiple) // sensitivity rounded to a nice round number

		altThreshold1 = Round(@coeff / 2, @multiple)
		altThreshold2 = Round(@coeff / 40, @multiple / 10)
		altThreshold3 = Round(@coeff / 7500 + 0.5) / 2
		distThreshold1 = @altThreshold1 * 2.5
		distThreshold2 = @altThreshold2 / 4
	}

	DATA
	{
		type = long

		block = 0
		intAlt = @KPSConstellations:sma - HomeWorld().Radius()
		kmDistThreshold1 = Round(@/distThreshold1 / 1000)
	}

	DATA
	{
		type = List<double>
		offsets = [1.0471975512, 2.0943951024]
	}

	DATA
	{
		type = List<string>
		names = ["The first satellite", "The second satellite"]
		vessels = ["KPS-Sat A2", "KPS-Sat A3"]
		markers = ["KPS Marker A2", "KPS Marker A3"]
	}

	BEHAVIOUR
	{
		name = SpawnVessel
		type = SpawnVessel

		VESSEL
		{
			name = @/markers.ElementAt(0)
			craftPart = constellations-dummy
			owned = False
			targetBody = HomeWorld()
			vesselType = DroppedPart

			ORBIT = CreateOrbit([@KPSConstellations:sma, 1.0E-11, @KPSConstellations:inc, 0, 0, @/offsets.ElementAt(0) + @/block * @KPSConstellations:blockPhaseOffset, 1.0E-11], 1)
		}
	}

	BEHAVIOUR
	{
		name = SpawnVessel
		type = SpawnVessel

		VESSEL
		{
			name = @/markers.ElementAt(1)
			craftPart = constellations-dummy
			owned = False
			targetBody = HomeWorld()
			vesselType = DroppedPart

			ORBIT = CreateOrbit([@KPSConstellations:sma, 1.0E-11, @KPSConstellations:inc, 0, 0, @/offsets.ElementAt(1) + @/block * @KPSConstellations:blockPhaseOffset, 1.0E-11], 1)
		}
	}

	PARAMETER
	{
		ITERATOR
		{
			type = int
			idx = [0, 1]
		}
		name = "Sat"+@idx
		type = All
		title = @/names.ElementAt(@idx)

		rewardFunds = @KPSConstellations:perSatFunds

		PARAMETER
		{
			name = Baseline
			type = VesselParameterGroup

			define = @/vessels.ElementAt(@../idx)

			PARAMETER
			{
				name = NewVessel
				type = NewVessel
			}

			PARAMETER
			{
				name = HasCrew
				type = HasCrew
				minCrew = 0
				maxCrew = 0
			}

			PARAMETER
			{
				name = HasAntenna
				type = HasAntenna
				minAntennaPower = 10000000000 // 10G
				antennaType = TRANSMIT
			}

			PARAMETER
			{
				name = Any
				type = Any
				title = Have solar panels onboard

				PARAMETER
				{
					name = PartValidation
					type = PartValidation
					title = 1 or more solar panels
					hideChildren = true

					partModule = ModuleDeployableSolarPanel
					minCount = 1
				}
			
				PARAMETER:NEEDS[NearFutureSolar]
				{
					name = PartValidation
					type = PartValidation
					title = 1 or more curved solar panels
					hideChildren = true
					
					partModule = ModuleCurvedSolarPanel
					minCount = 1
				}
			
				PARAMETER:NEEDS[Kopernicus]
				{
					name = PartValidation
					type = PartValidation
					hideChildren = true
					title = 1 or more solar panels
					partModule = KopernicusSolarPanel
					minCount = 1
				}
			}

			PARAMETER
			{
				name = Orbit
				type = Orbit

				minPeA = Max(0, @/intAlt - @/altThreshold1)
				maxApA = @/intAlt + @/altThreshold1

				minInclination = Max(0, @KPSConstellations:inc - 0.1)
				maxInclination = Min(180, @KPSConstellations:inc + 0.1)
			}

			PARAMETER
			{
				name = Rendezvous
				type = Rendezvous

				title = Keep the satellite within @/kmDistThreshold1.Print() km of the @/markers.ElementAt(@../../idx)
				hideChildren = !@Constellations:DEBUG

				disableOnStateChange = false

				vessel = @/markers.ElementAt(@../../idx)
				distance = @/distThreshold1
			}

			duration = 2d
		}

		PARAMETER
		{
			name = Precision1
			type = VesselParameterGroup

			vessel = @/vessels.ElementAt(@../idx)

			title = "Circularize at "+@/intAlt+"m with less than "+@/altThreshold2.ToString("N0")+" m deviation (Optional)"

			optional = True
			rewardReputation = @Constellations:precisionReputation
			rewardFunds = @Constellations:precisionFunds

			PARAMETER
			{
				name = Precision1Orbit
				type = Orbit
				hidden = !@Constellations:DEBUG
				hideChildren = !@Constellations:DEBUG

				minPeA = Max(0, @/intAlt - @/altThreshold2)
				maxApA = @/intAlt + @/altThreshold2
			}

			duration = 2s
		}

		PARAMETER
		{
			name = Precision2
			type = VesselParameterGroup

			vessel = @/vessels.ElementAt(@../idx)

			title = "Circularize at "+@/intAlt+"m with less than "+@/altThreshold3.ToString("N0")+" m deviation (Optional)"

			optional = True
			rewardReputation = 2 * @Constellations:precisionReputation
			rewardFunds = 2 * @Constellations:precisionFunds

			PARAMETER
			{
				name = Precision2Orbit
				type = Orbit
				hidden = !@Constellations:DEBUG
				hideChildren = !@Constellations:DEBUG

				minPeA = Max(0, @/intAlt - @/altThreshold3)
				maxApA = @/intAlt + @/altThreshold3
			}

			duration = 2s
		}

		PARAMETER
		{
			name = Precision3
			type = VesselParameterGroup

			vessel = @/vessels.ElementAt(@../idx)

			title = "Place the satellite within "+@/distThreshold2.ToString("N0")+" m of the "+@/markers.ElementAt(@../idx)+" (Optional)"

			optional = True
			rewardReputation = @Constellations:precisionReputation
			rewardFunds = @Constellations:precisionFunds

			PARAMETER
			{
				name = Precision3Rendezvous
				type = Rendezvous
				hidden = !@Constellations:DEBUG
				hideChildren = !@Constellations:DEBUG

				vessel = @/markers.ElementAt(@../../idx)
				distance = @/distThreshold2
			}
		}
	}

	BEHAVIOUR
	{
		name = DestroyVessel
		type = DestroyVessel
		onState = PARAMETER_COMPLETED
		parameter = Sat0
		vessel = @/markers.ElementAt(0)
	}

	BEHAVIOUR
	{
		name = DestroyVessel
		type = DestroyVessel
		onState = PARAMETER_COMPLETED
		parameter = Sat1
		vessel = @/markers.ElementAt(1)
	}
}
