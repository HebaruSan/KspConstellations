CONTRACT_TYPE
{
	sortKey = g

	name = SentinelLagrangeStationKeep
	group = StationKeepConstellations
	agent = Sentinel

	genericTitle = Planets's Lagrange point SENTINEL station-keeping
	title = "@/targetBody"+"'s @/point point SENTINEL Infrared Telescope station-keeping"
	description = It's been some time since we last verified position of SENTINEL telescope at @targetBody's @/point point. It is normal for a satellite to drift from its target position over time, we ask you to bring the vessel back within margins. If a vessel is already in a correct position, you don't have to do anything other that focusing it.

	synopsis = Fix @targetBody's @point point SENTINEL Telescope orbit if necessary
	genericDescription = Fix bodys Lagrange point SENTINEL Telescope orbit if necessary

	completedMessage = SENTINEL is in position and working!

	prestige = Trivial

	maxExpiry = 90

	targetBody = @/planet

	rewardScience = 0
	rewardReputation = 2 * @StationKeepConstellations:stationKeepReputation
	rewardFunds = 3 * @StationKeepConstellations:stationKeepFunds / @targetBody.Multiplier()
	advanceFunds = 0
	failureReputation = @rewardReputation
	failureFunds = @advanceFunds

	DATA
	{
		type = CelestialBody
		planet = ReachedBodies().Where(b => (b.IsPlanet() && b.Orbit().Eccentricity() < 0.4)).SelectUnique()
		uniquenessCheck = CONTRACT_ACTIVE

		title = "Target body must be a planet, with an orbit with an eccentricity less than 0.4, and must be reached by the player"
	}

	DATA
	{
		type = List<string>
		points = ["L3", "L4", "L5"]
	}

	DATA
	{
		type = string
		point = @/points.SelectUnique()
		uniquenessCheck = CONTRACT_ACTIVE
		hidden = true
	}

	DATA
	{
		type = string
		marker = @/targetBody+" "+@/point+" Marker"
		sentinel = @/targetBody+" "+@/point+" SENTINEL"
		hidden = true
	}

	REQUIREMENT
	{
		name = Established
		type = ValidVessel

		vessel = @/sentinel
	}

	REQUIREMENT
	{
		name = OldSentinel
		type = Expression

		expression = Vessel(VesselIdentifier(@/sentinel)).MET() > @StationKeepConstellations:stationKeepCD
		title = At least @StationKeepConstellations:stationKeepCD has passed since the telescope has been established
	}

	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract

		title = At least @StationKeepConstellations:stationKeepCD has passed since the last time the contract was completed.

		contractType = SentinelLagrangeStationKeep
		cooldownDuration = @StationKeepConstellations:stationKeepCD
		minCount = 0
	}

	BEHAVIOUR
	{
		name = SpawnVessel
		type = SpawnVessel

		VESSEL
		{
			name = @/marker
			craftPart = constellations-dummy
			owned = False
			targetBody = @/targetBody.Parent()
			vesselType = DroppedPart

			ORBIT
			{
				SMA = @/targetBody.Orbit().SemiMajorAxis()
				ECC = @/targetBody.Orbit().Eccentricity() + 1.0E-12
				INC = @/targetBody.Orbit().Inclination() + 1.0E-12
				LPE = @/targetBody.Orbit().ArgumentOfPeriapsis()
				LAN = @/targetBody.Orbit().LAN() + 1.0E-12
				MNA = @/targetBody.Orbit().MeanAnomalyAtEpoch() + (@/point != "L3" ? (@/point != "L4" ? 5.23598775598 : -5.23598775598) : 3.14159265359)
				EPH = @/targetBody.Orbit().Epoch() + 1.0E-12
				REF = 0 // ignored
			}
		}
	}

	DATA
	{
		type = double
		sma = Max(@/targetBody.Orbit().SemiMajorAxis(), 1)

		sensitivity = 2 * Pow(@/sma, 1.5) / Pow(Max(1, @/targetBody.Parent().GM()), 0.5) // rate of change of sma in relation to orbital velocity
		multiple = Pow(10, Round(Log(@sensitivity, 10) - 0.5))
		coeff = Round(@sensitivity, @multiple) // sensitivity rounded to a nice round number

		altThreshold1 = Round(@coeff / 2, @multiple)
		distThreshold1 = @altThreshold1 * 2.5
		distThreshold3 = @distThreshold1 * 2.5
	}

	DATA
	{
		type = long

		intAp = @/targetBody.Orbit().Apoapsis()
		intPe = @/targetBody.Orbit().Periapsis()
		kmDistThreshold3 = Round(@/distThreshold3 / 1000)
	}

	PARAMETER
	{
		name = Vessel
		type = VesselParameterGroup

		vessel = @/sentinel

		PARAMETER
		{
			name = VesselIsType
			type = VesselIsType
			vesselType = Probe
		}

		PARAMETER
		{
			name = Orbit
			type = Orbit

			targetBody = @/targetBody.Parent()

			minPeA = Max(0, @/intPe - @/altThreshold1)
			maxPeA = @/intPe + @/altThreshold1
			minApA = Max(0, @/intAp - @/altThreshold1)
			maxApA = @/intAp + @/altThreshold1

			minInclination = Max(0, @/targetBody.Orbit().Inclination() - 0.1)
			maxInclination = Min(180, @/targetBody.Orbit().Inclination() + 0.1)
		}

		PARAMETER
		{
			name = Rendezvous
			type = Rendezvous

			title = "The vessel should be within "+@/kmDistThreshold3.Print()+" km of the marker"
			hideChildren = !@StationKeepConstellations:DEBUG
			hideChildren = !@StationKeepConstellations:DEBUG

			disableOnStateChange = false

			vessel = @/marker
			distance = @/distThreshold3
		}

		duration = 2d
	}

	BEHAVIOUR
	{
		name = DestroyVessel
		type = DestroyVessel
		onState = CONTRACT_COMPLETED
		vessel = @/marker
	}
}
