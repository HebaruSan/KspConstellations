CONTRACT_TYPE
{
	sortKey = d

	name = PlanetRelayPolarStationKeep
	group = StationKeepConstellations
	agent = Frontier Link

	genericTitle = Planet polar relays station-keeping
	title = @/targetBody+"'s polar relays station-keeping"
	description = It's been more than a year since we last verified position of @/targetBody relays. It is normal for a satellite to drift from its target position over time, we ask you to bring the relays back within margins. If a vessel is already in a correct position, you don't have to do anything other that focusing it.

	synopsis = Fix @targetBody's relays orbits if necessary
	genericDescription = Fix bodys relays orbits if necessary

	completedMessage = The relays are in position and working!

	prestige = Trivial

	maxExpiry = 21

	targetBody = @/planet

	rewardScience = 0
	rewardReputation = @StationKeepConstellations:stationKeepReputation
	rewardFunds = 2 * @StationKeepConstellations:stationKeepFunds / @targetBody.Multiplier()
	advanceFunds = 0
	failureReputation = @rewardReputation
	failureFunds = @advanceFunds

	DATA
	{
		type = CelestialBody
		planet = ReachedBodies().Where(b => (b.IsPlanet() && !b.HasSurface() && b.Children().Count() >= 3 && (b.Parent() == (HomeWorld().Parent().IsSun() ? HomeWorld().Parent() : HomeWorld().Parent().Parent()) ) )).SelectUnique()

		requiredValue = true
		uniquenessCheck = GROUP_ACTIVE

		title = The target body has to be a reached gas planet in the same solar system with 3+ moons
	}

	DATA
	{
		type = string
		relayA = @/targetBody+" Relay A"
		relayB = @/targetBody+" Relay B"
		markerA = @/targetBody+" Relay Marker A"
		markerB = @/targetBody+" Relay Marker B"
		hidden = true
	}

	DATA
	{
		type = List<string>
		markers = [ @/markerA, @/markerB ]
		hidden = true
	}

	DATA
	{
		type = List<VesselIdentifier>
		relays = [ @/relayA, @/relayB ]
		hidden = true
	}

	REQUIREMENT
	{
		name = EstablishedA
		type = ValidVessel

		vessel = @/relayA
	}

	REQUIREMENT
	{
		name = EstablishedB
		type = ValidVessel

		vessel = @/relayB
	}

	DATA
	{
		type = double
		hidden = true

		sma = 5 * (@/targetBody.Radius() + @/targetBody.AtmosphereAltitude())
		ecc = 0.75
		Pe = @/sma * (1 - @/ecc) - @/targetBody.Radius()
		Ap = @/sma * (1 + @/ecc) - @/targetBody.Radius()
	}

	REQUIREMENT
	{
		name = OldRelays
		type = Expression

		expression = (Vessel(@/relays.ElementAt(0)).MET() > @StationKeepConstellations:stationKeepCD) && (Vessel(@/relays.ElementAt(1)).MET() > @StationKeepConstellations:stationKeepCD)
		title = At least @StationKeepConstellations:stationKeepCD has passed since the relays have been established
	}

	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract

		title = At least @StationKeepConstellations:stationKeepCD has passed since the last time the contract was completed.

		contractType = PlanetRelayPolarStationKeep
		cooldownDuration = @StationKeepConstellations:stationKeepCD
		minCount = 0
	}

	BEHAVIOUR
	{
		name = SpawnVessel
		type = SpawnVessel

		VESSEL
		{
			name = @/markers.ElementAt(0)
			craftPart = constellations-dummy
			owned = False
			targetBody = @/targetBody
			vesselType = DroppedPart

			ORBIT
			{
				SMA = @/sma
				ECC = @/ecc
				INC = 90
				LPE = 270
				LAN = 0
				MNA = 0
				EPH = 0
				REF = 0 // ignored
			}
		}

		VESSEL
		{
			name = @/markers.ElementAt(1)
			craftPart = constellations-dummy
			owned = False
			targetBody = @/targetBody
			vesselType = DroppedPart

			ORBIT
			{
				SMA = @/sma
				ECC = @/ecc
				INC = 90
				LPE = 270
				LAN = 0
				MNA = 3.1415926536
				EPH = 0
				REF = 0 // ignored
			}
		}
	}

	DATA
	{
		type = long
		intPe = @/Pe
		intAp = @/Ap
	}

	DATA
	{
		type = double

		magnitude = Round(Log(@/intAp, 10), 1)
		g1 = Pow(10, Max(@magnitude-4, 2))
		g2 = Max(Pow(10, @magnitude-7), 0.5)

		oPrecision0 = Max(Round(@/intAp / 500, @g1), 20 * @g1)
		dPrecision0 = Max(Round(@/intAp / 2500, 200000 * @g2), 200000 * @g2)
	}

	PARAMETER
	{
		ITERATOR
		{
			type = int
			idx = [0, 1]
		}
		name = "Relay"+@idx
		type = VesselParameterGroup

		vessel = @/relays.ElementAt(@idx)

		completedMessage = Position of the @/relays.ElementAt(@idx) verified successfully
		rewardFunds = @StationKeepConstellations:stationKeepFunds / @targetBody.Multiplier()

		PARAMETER
		{
			name = VesselIsType
			type = VesselIsType
			vesselType = Relay
		}

		PARAMETER
		{
			name = Orbit
			type = Orbit

			minPeA = Max(0, @/targetBody.Orbit().Periapsis() - @/oPrecision0)
			maxApA = @/targetBody.Orbit().Apoapsis() + @/oPrecision0

			minInclination = Max(0, @/targetBody.Orbit().Inclination() - 0.1)
			maxInclination = Min(180, @/targetBody.Orbit().Inclination() + 0.1)
		}

		PARAMETER
		{
			name = Rendezvous
			type = Rendezvous

			title = "The relay should be within "+@/dPrecision0.ToString("0")+"m of the marker"
			hideChildren = !@StationKeepConstellations:DEBUG

			disableOnStateChange = false

			vessel = @/markers.ElementAt(@../idx)
			distance = @/dPrecision0
		}

		duration = 2s
	}
	
	BEHAVIOUR
	{
		name = DestroyVessel
		type = DestroyVessel
		onState = CONTRACT_COMPLETED
		vessel = @/markers.ElementAt(0)
		vessel = @/markers.ElementAt(1)
	}
}