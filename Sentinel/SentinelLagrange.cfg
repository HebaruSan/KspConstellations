CONTRACT_TYPE
{
	sortKey = a

	name = ConstellationsSentinelLagrange
	group = SentinelConstellations

	genericTitle = Place SENTINEL Infrared Telescope at planets's Lagrange point
	title = Place SENTINEL Infrared Telescope at @/targetBody's @/point Lagrange point
	description = "As pretty as impact craters are, we think that "+HomeWorld()+" has more than enough of large ones. It would be nice to have an early warning if an asteroid was on a collision course with our planet. We secured funding and we want you to put an infrared telescope in the @/point point of @/targetBody, as it should help us cover our blind spots."

	synopsis = Place a vessel with a SENTINEL telescope at a @/point point of @/targetBody
	genericDescription = Place a vessel with a SENTINEL telescopee at planets Lagrange point

	completedMessage = SENTINEL is in position and working!

	prestige = Significant

	targetBody = @/planet

	rewardScience = 0
	rewardReputation = @SentinelConstellations:baseReputation
	rewardFunds = @SentinelConstellations:baseFunds
	advanceFunds = @rewardFunds / 3
	failureReputation = @rewardReputation
	failureFunds = @advanceFunds

	DATA
	{
		type = CelestialBody
		planet = ReachedBodies().Where(b => (b.IsPlanet() && b.Orbit().Eccentricity() < 0.4)).SelectUnique()
		uniquenessCheck = CONTRACT_ACTIVE

		title = "Target body must be a planet, with an orbit with an eccentricity less than 0.4, and must be reached by the player"
	}

	DATA
	{
		type = List<string>
		points = ["L3", "L4", "L5"]
	}

	DATA
	{
		type = string
		point = @/points.SelectUnique()
		uniquenessCheck = CONTRACT_ACTIVE
		hidden = true
	}

	DATA
	{
		type = double
		rng = Random()
	}

	REQUIREMENT
	{
		name = Rng
		type = Expression
		expression = @/rng > 0.9
		checkOnActiveContract = false
		title = Random chance
	}

	DATA
	{
		type = string
		marker = @/targetBody+" "+@/point+" Marker"
		sentinel = @/targetBody+" "+@/point+" SENTINEL"
		hidden = true
	}

	REQUIREMENT
	{
		name = NotEstablished
		type = ValidVessel

		vessel = @/sentinel
		invertRequirement = true
	}

	REQUIREMENT
	{
		name = TechResearched
		type = TechResearched

		part = InfraredTelescope
	}

	BEHAVIOUR
	{
		name = SpawnVessel
		type = SpawnVessel

		VESSEL
		{
			name = @/marker
			craftPart = constellations-dummy
			owned = False
			targetBody = @/targetBody.Parent()
			vesselType = DroppedPart

			ORBIT
			{
				SMA = @/targetBody.Orbit().SemiMajorAxis()
				ECC = @/targetBody.Orbit().Eccentricity() + 1.0E-12
				INC = @/targetBody.Orbit().Inclination() + 1.0E-12
				LPE = @/targetBody.Orbit().ArgumentOfPeriapsis()
				LAN = @/targetBody.Orbit().LAN() + 1.0E-12
				MNA = @/targetBody.Orbit().MeanAnomalyAtEpoch() + (@/point != "L3" ? (@/point != "L4" ? 5.23598775598 : -5.23598775598) : 3.14159265359)
				EPH = @/targetBody.Orbit().Epoch() + 1.0E-12
				REF = 0 // ignored
			}
		}
	}

	DATA
	{
		type = long
		intAp = @/targetBody.Orbit().Apoapsis()
		intPe = @/targetBody.Orbit().Periapsis()
	}

	DATA
	{
		type = double

		magnitude = Round(Log(@/intAp, 10), 1)
		g1 = Pow(10, Max(@magnitude-4, 2))
		g2 = Max(Pow(10, @magnitude-7), 0.5)

		oPrecision0 = Max(Round(@/intAp / 500, @g1), 20 * @g1)
		oPrecision1 = Max(Round(@/intAp / 10000, @g1), @g1)
		oPrecision2 = Max(Round(@/intAp / 10000000, @g2), @g2)
		dPrecision0 = Max(Round(@/intAp / 250000, 2000 * @g2), 2000 * @g2)
		dPrecision1 = Max(Round(@/intAp / 10000000, 200 * @g2), 200 * @g2)
	}

	PARAMETER
	{
		name = Vessel
		type = VesselParameterGroup

		define = @/sentinel

		PARAMETER
		{
			name = NewVessel
			type = NewVessel
		}

		PARAMETER
		{
			name = VesselIsType
			type = VesselIsType
			vesselType = Probe
		}

		PARAMETER
		{
			name = HasCrew
			type = HasCrew
			minCrew = 0
			maxCrew = 0
		}

		PARAMETER
		{
			name = PartValidation
			type = PartValidation

			part = InfraredTelescope
		}

		PARAMETER
		{
			name = Any
			type = Any
			title = Have a power generator onboard

			PARAMETER
			{
				name = PartValidation
				type = PartValidation
				title = 1 or more solar panels
				hideChildren = !@Constellations:DEBUG
				partModule = ModuleDeployableSolarPanel
				minCount = 1
			}

			PARAMETER
			{
				name = PartValidation
				type = PartValidation
				title = 1 or more generators
				hideChildren = !@Constellations:DEBUG
				partModule = ModuleGenerator
				minCount = 1
			}

			PARAMETER:NEEDS[NearFutureSolar]
			{
				name = PartValidation
				type = PartValidation
				title = 1 or more curved solar panels
				hideChildren = !@Constellations:DEBUG
				partModule = ModuleCurvedSolarPanel
				minCount = 1
			}

			PARAMETER:NEEDS[NearFutureElectrical]
			{
				name = PartValidation
				type = PartValidation
				title = 1 or more fission reactors
				hideChildren = !@Constellations:DEBUG
				partModule = FissionReactor
				minCount = 1
			}

			PARAMETER:NEEDS[NearFutureElectrical]
			{
				name = PartValidation
				type = PartValidation
				title = 1 or more radioisotope generators
				hideChildren = !@Constellations:DEBUG
				partModule = ModuleRadioisotopeGenerator
				minCount = 1
			}

			PARAMETER:NEEDS[Kopernicus]
			{
				name = PartValidation
				type = PartValidation
				title = 1 or more solar panels
				hideChildren = !@Constellations:DEBUG
				partModule = KopernicusSolarPanel
				minCount = 1
			}
		}

		PARAMETER
		{
			name = Orbit
			type = Orbit

			targetBody = @/targetBody.Parent()

			minPeA = Max(0, @/intPe - @/oPrecision0)
			maxPeA = @/intPe + @/oPrecision0
			minApA = Max(0, @/intAp - @/oPrecision0)
			maxApA = @/intAp + @/oPrecision0

			minInclination = Max(0, @/targetBody.Orbit().Inclination() - 0.1)
			maxInclination = Min(180, @/targetBody.Orbit().Inclination() + 0.1)
		}

		PARAMETER
		{
			name = Rendezvous
			type = Rendezvous

			title = "Place the vessel within "+@/dPrecision0.ToString("0")+"m of the marker"
			hideChildren = !@Constellations:DEBUG

			disableOnStateChange = true

			vessel = @/marker
			distance = @/dPrecision0
		}

		duration = 2d
	}

	PARAMETER
	{
		name = Precision1
		type = VesselParameterGroup

		REQUIREMENT
		{
			name = CircularOrbit
			type = Expression

			expression = @/targetBody.Orbit().Eccentricity() == 0
		}

		vessel = @/sentinel

		title = "Circularize at "+@/intPe+"m with less than "+@/oPrecision1.ToString("0")+"m deviation (Optional)"

		optional = True
		rewardReputation = @Constellations:precisionReputation
		rewardFunds = @Constellations:precisionFunds

		PARAMETER
		{
			name = Precision1Orbit
			type = Orbit
			hidden = !@Constellations:DEBUG
			hideChildren = !@Constellations:DEBUG

			targetBody = @/targetBody.Parent()

			minPeA = Max(0, @/intPe - @/oPrecision1)
			maxApA = @/intAp + @/oPrecision1
		}

		duration = 2s
	}

	PARAMETER
	{
		name = Precision1Eliptical
		type = VesselParameterGroup

		REQUIREMENT
		{
			name = ElipticalOrbit
			type = Expression

			expression = @/targetBody.Orbit().Eccentricity() == 0
			invertRequirement = true
		}

		vessel = @/sentinel

		title = "Match "+@/targetBody+"'s orbit with less than "+@/oPrecision1.ToString("0")+"m deviation (Optional)"

		optional = True
		rewardReputation = @Constellations:precisionReputation
		rewardFunds = @Constellations:precisionFunds

		PARAMETER
		{
			name = Precision1Orbit
			type = Orbit

			targetBody = @/targetBody.Parent()

			minPeA = Max(0, @/intPe - @/oPrecision1)
			maxPeA = @/intPe + @/oPrecision1
			minApA = Max(0, @/intAp - @/oPrecision1)
			maxApA = @/intAp + @/oPrecision1
		}

		duration = 2s
	}

	PARAMETER
	{
		name = Precision2
		type = VesselParameterGroup

		REQUIREMENT
		{
			name = CircularOrbit
			type = Expression

			expression = @/targetBody.Orbit().Eccentricity() == 0
		}

		vessel = @/sentinel

		title = "Circularize at "+@/intPe+"m with less than "+@/oPrecision2.ToString("0")+"m deviation (Optional)"

		optional = True
		rewardReputation = @Constellations:precisionReputation
		rewardFunds = @Constellations:precisionFunds

		PARAMETER
		{
			name = Precision2Orbit
			type = Orbit
			hidden = !@Constellations:DEBUG
			hideChildren = !@Constellations:DEBUG

			targetBody = @/targetBody.Parent()

			minPeA = Max(0, @/intPe - @/oPrecision2)
			maxApA = @/intAp + @/oPrecision2
		}

		duration = 2s
	}

	PARAMETER
	{
		name = Precision2Eliptical
		type = VesselParameterGroup

		REQUIREMENT
		{
			name = ElipticalOrbit
			type = Expression

			expression = @/targetBody.Orbit().Eccentricity() == 0
			invertRequirement = true
		}

		vessel = @/sentinel

		title = "Match "+@/targetBody+"'s orbit with less than "+@/oPrecision2.ToString("0")+"m deviation (Optional)"

		optional = True
		rewardReputation = @Constellations:precisionReputation
		rewardFunds = @Constellations:precisionFunds

		PARAMETER
		{
			name = Precision2Orbit
			type = Orbit

			targetBody = @/targetBody.Parent()

			minPeA = Max(0, @/intPe - @/oPrecision2)
			maxPeA = @/intPe + @/oPrecision2
			minApA = Max(0, @/intAp - @/oPrecision2)
			maxApA = @/intAp + @/oPrecision2
		}

		duration = 2s
	}

	PARAMETER
	{
		name = Precision3
		type = VesselParameterGroup

		vessel = @/sentinel

		title = "Place the vessel within "+@/dPrecision1.ToString("0")+"m of the marker (Optional)"

		optional = True
		rewardReputation = @Constellations:precisionReputation
		rewardFunds = @Constellations:precisionFunds

		PARAMETER
		{
			name = Precision3Rendezvous
			type = Rendezvous
			hidden = !@Constellations:DEBUG
			hideChildren = !@Constellations:DEBUG

			vessel = @/marker
			distance = @/dPrecision1
		}
	}

	BEHAVIOUR
	{
		name = DestroyVessel
		type = DestroyVessel
		onState = CONTRACT_COMPLETED
		vessel = @/marker
	}
}
