CONTRACT_TYPE
{
	sortKey = c
	name = ConstellationsRelay1
	group = RelayConstellations

	// TODO
	title = TODO
	description = TODO

	synopsis = TODO

	maxCompletions = 1
	maxSimultaneous = 1

	prestige = Trivial

	targetBody = @/targetBody1

	// TODO
	rewardScience = 0
	rewardReputation = 30
	rewardFunds = 150000.0
	advanceFunds = 100000.0
	failureReputation = 20
	failureFunds = 100000.0

	DATA
	{
		type = CelestialBody
		targetBody1 = ReachedBodies().Where(b => !b.IsHomeWorld() && !b.IsSun && b.Children().Count() < 3).SelectUnique()
		requiredValue = true
		uniquenessCheck = GROUP_ACTIVE
		title = Must have reached a celestial body that is not Sun nor a gas giant
	}

	DATA
	{
		type = double
		//                         rough distance with extra margin
		requiredAntennaPower = Pow(1.5 * (@/targetBody.SemiMajorAxis() + (HomeWorld().Parent().IsSun() ? HomeWorld().SemiMajorAxis() : HomeWorld().Parent().SemiMajorAxis())), 2) / 200000000000
	}

	DATA
	{
		type = double
		requiredAntennaPowerRounded = (requiredAntennaPower > 100000000000 ?  Round(requiredAntennaPower/1000000000)*1000000000 : (requiredAntennaPower > 100000000 ?  Round(requiredAntennaPower/1000000)*1000000 : Round(requiredAntennaPower/1000)*1000))
	}

	REQUIREMENT
	{
		name = Any
		type = Any

		REQUIREMENT
		{
			name = CompleteContract
			type = CompleteContract

			contractType = ConstellationsKsoRelay2
		}

		REQUIREMENT
		{
			name = Facility
			type = Facility

			facility = TrackingStation
			minLevel = 3
			checkOnActiveContract = false
		}
	}

	REQUIREMENT
	{
		name = Any
		type = Any

		REQUIREMENT
		{
			name = Expression
			type = Expression

			expression = @/requiredAntennaPowerRounded < 100000000000
			title = Required antenna power has to be lower than 100G, is @/requiredAntennaPowerRounded.Print()
		}

		REQUIREMENT
		{
			name = TechResearched
			type = TechResearched

			part = RelayAntenna100
		}
	}

	REQUIREMENT
	{
		name = FlyBy
		type = FlyBy
	}

	DATA
	{
		type = VesselIdentifier
		relay = "@/targetBody"+" relay"
	}

	PARAMETER
	{
		name = VesselParameterGroup
		type = VesselParameterGroup

		define = @/relay
		defineList = ContractRelays

		dissassociateVesselsOnContractFailure = true

		PARAMETER
		{
			name = HasCrew
			type = HasCrew
			minCrew = 0
			maxCrew = 0
		}

		PARAMETER
		{
			name = HasAntenna
			type = HasAntenna
			minAntennaPower = @/requiredAntennaPowerRounded
			antennaType = RELAY
			notes = This might require multiple antennas, remember that combining antennas is non-linear.\nAlso note that difficulty settings alters the antenna power, so there might be a mismatch between antenna ratings shown in VAB and the actual power.
		}

		PARAMETER
		{
			name = SolarPower
			type = Any
			title = Have solar panels onboard

			PARAMETER
			{
				name = PartValidationStockSolar
				type = PartValidation
				title = 1 or more solar panels
				hideChildren = true

				partModule = ModuleDeployableSolarPanel
				minCount = 1
			}
		
			PARAMETER:NEEDS[NearFutureSolar]
			{
				name = PartValidationNearFutureSolar
				type = PartValidation
				title = 1 or more curved solar panels
				hideChildren = true
				
				partModule = ModuleCurvedSolarPanel
				minCount = 1
			}
		
			PARAMETER:NEEDS[Kopernicus]
			{
				name = PartValidationKopernicusSolar
				type = PartValidation
				hideChildren = true
				title = 1 or more solar panels
				partModule = KopernicusSolarPanel
				minCount = 1
			}
		}

		PARAMETER
		{
			name = Orbit
			type = Orbit

			targetBody = Kerbin

			minAltitude = @/targetBody.Radius() + @/targetBody.AtmosphereAltitude()
			maxAltitude = @/targetBody.SphereOfInfluence * 0.9

			maxEccentricity = 0.01 // TODO

			notes = TODO As long as it allows you are free to pick any circular orbit 
		}

		duration = 2d
	}
}
